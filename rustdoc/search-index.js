var searchIndex = JSON.parse('{\
"decorum":{"doc":"Making floating-point behave: ordering, equivalence, …","t":[3,11,18,18,8,11,18,11,18,11,18,11,18,11,18,11,18,11,18,11,18,11,18,6,8,18,8,11,18,11,18,11,18,11,18,18,18,18,6,6,18,18,8,6,11,18,8,6,6,8,11,18,8,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,0,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,10,10,10,5,11,10,5,11,8,11,10],"n":["ConstrainedFloat","E","E","EPSILON","Encoding","FRAC_1_PI","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_2","FRAC_PI_3","FRAC_PI_3","FRAC_PI_4","FRAC_PI_4","FRAC_PI_6","FRAC_PI_6","FRAC_PI_8","FRAC_PI_8","Finite","Float","INFINITY","Infinite","LN_10","LN_10","LN_2","LN_2","LOG10_E","LOG10_E","LOG2_E","LOG2_E","MAX","MIN","MIN_POSITIVE","N32","N64","NAN","NEG_INFINITY","Nan","NotNan","PI","PI","Primitive","R32","R64","Real","SQRT_2","SQRT_2","ToCanonicalBits","Total","abs","abs","abs","abs","abs","abs","abs","abs_diff_eq","abs_sub","abs_sub","abs_sub","abs_sub","abs_sub","abs_sub","abs_sub","acos","acos","acos","acos","acos","acos","acos","acos","acosh","acosh","acosh","acosh","acosh","acosh","acosh","acosh","add","add","add_assign","add_assign","as_ref","asin","asin","asin","asin","asin","asin","asin","asin","asinh","asinh","asinh","asinh","asinh","asinh","asinh","asinh","atan","atan","atan","atan","atan","atan","atan","atan","atan2","atan2","atan2","atan2","atan2","atan2","atan2","atan2","atanh","atanh","atanh","atanh","atanh","atanh","atanh","atanh","borrow","borrow_mut","cbrt","cbrt","cbrt","cbrt","cbrt","cbrt","cbrt","cbrt","ceil","ceil","ceil","ceil","ceil","ceil","ceil","ceil","classify","classify","classify","clone","clone_into","cmp","cmp","cos","cos","cos","cos","cos","cos","cos","cos","cosh","cosh","cosh","cosh","cosh","cosh","cosh","cosh","default","default_epsilon","default_max_relative","default_max_ulps","deserialize","div","div","div_assign","div_assign","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","eq","eq","exp","exp","exp","exp","exp","exp","exp","exp","exp2","exp2","exp2","exp2","exp2","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","exp_m1","exp_m1","exp_m1","exp_m1","exp_m1","floor","floor","floor","floor","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fract","fract","fract","fract","fract","fract","fract","fract","from","from","from","from","from","from","from_f32","from_f64","from_i16","from_i32","from_i64","from_i8","from_inner","from_isize","from_str","from_str_radix","from_subset","from_u16","from_u32","from_u64","from_u8","from_usize","hash","hash","hypot","hypot","hypot","hypot","hypot","hypot","hypot","hypot","infinity","integer_decode","integer_decode","integer_decode","into","into_inner","into_superset","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_nan","is_nan","is_nan","is_negative","is_normal","is_normal","is_normal","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_undefined","is_zero","ln","ln","ln","ln","ln","ln","ln","ln","ln_1p","ln_1p","ln_1p","ln_1p","ln_1p","ln_1p","ln_1p","ln_1p","log","log","log","log","log","log","log","log","log10","log10","log10","log10","log10","log10","log10","log10","log2","log2","log2","log2","log2","log2","log2","log2","max","max","max","max","max","max","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","min","min","min","min","min","min","min_max_or_undefined","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_add","mul_add","mul_add","mul_add","mul_assign","mul_assign","nan","neg","neg_infinity","neg_zero","one","partial_cmp","partial_cmp","powf","powf","powf","powf","powf","powf","powf","powf","powi","powi","powi","powi","powi","powi","powi","powi","product","recip","recip","recip","recip","recip","recip","recip","recip","relative_eq","rem","rem","rem_assign","rem_assign","round","round","round","round","round","round","round","round","serialize","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin","sin","sin","sin","sin","sin_cos","sin_cos","sin_cos","sin_cos","sin_cos","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sinh","sinh","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sub","sub","sub_assign","sub_assign","sum","tan","tan","tan","tan","tan","tan","tan","tan","tanh","tanh","tanh","tanh","tanh","tanh","tanh","tanh","to_canonical_bits","to_canonical_bits","to_degrees","to_degrees","to_degrees","to_degrees","to_degrees","to_f32","to_f64","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_radians","to_radians","to_radians","to_radians","to_radians","to_string","to_u16","to_u32","to_u64","to_u8","to_usize","trunc","trunc","trunc","trunc","trunc","trunc","trunc","trunc","try_from","try_into","type_id","ulps_eq","zero","FloatEq","FloatOrd","IntrinsicOrd","float_cmp","float_eq","is_undefined","max_or_undefined","max_or_undefined","min_max_or_undefined","min_or_undefined","min_or_undefined","FloatHash","float_hash","hash"],"q":["decorumdecorum::cmp","","","","","","","","","","","decorum::hash","",""],"d":["Floating-point proxy that provides a total ordering, …","","","","Floating-point encoding.","","","","","","","","","","","","","","","","","","","Floating-point representation that must be a real number.","Floating-point representations.","","Floating-point representations that expose infinities.","","","","","","","","","","","","32-bit floating-point representation that cannot be <code>NaN</code>.","64-bit floating-point representation that cannot be <code>NaN</code>.","A representation of <code>NaN</code>.","","Floating-point representations that expose <code>NaN</code>s.","Floating-point representation that cannot be <code>NaN</code>.","","","Primitive floating-point types.","32-bit floating-point representation that must be a real …","64-bit floating-point representation that must be a real …","Types that can represent real numbers.","","","Converts floating-point values into a canonicalized form.","Floating-point representation with total ordering.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Ordering and comparisons.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Converts a primitive floating-point value into a proxy.","","","","Converts a proxy into another proxy that is capable of …","","","","","","Hashing.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Converts a proxy into a primitive floating-point value.","Converts a proxy into another proxy that is capable of …onversion to a canonical representation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Equivalence relation for floating-point primitives.","Total ordering of primitive floating-point types.","Partial ordering of types with intrinsic representations …","","","Returns <code>true</code> if a value encodes <em>undefined</em>, otherwise <code>false</code>.","Partial maximum of types with intrinsic representations …","","Compares two values and returns their pairwise minimum and …","Partial minimum of types with intrinsic representations …","","Hashing for primitive floating-point values.","",""],"i":[0,1,2,3,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,0,4,0,1,2,1,2,1,2,1,2,3,3,3,0,0,5,4,0,0,1,2,0,0,0,0,1,2,0,0,6,7,8,9,1,1,1,1,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,1,1,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,3,1,1,1,1,0,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,1,1,1,1,1,1,1,1,1,6,7,8,9,1,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,10,11,12,1,1,1,2,6,7,8,9,1,1,1,10,10,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,2,6,7,8,9,1,1,1,1,3,1,1,1,1,1,4,1,1,4,1,1,5,1,1,1,3,1,1,1,3,6,7,8,9,1,1,1,3,6,7,8,9,1,1,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,6,7,8,9,1,1,6,7,8,9,1,1,1,1,6,7,8,9,1,1,1,6,7,8,9,1,1,6,7,8,9,1,1,1,1,1,1,2,6,7,8,9,1,1,1,1,1,1,1,1,1,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,1,2,6,7,8,9,1,1,1,1,1,1,1,1,2,6,7,8,9,1,1,1,1,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,1,1,1,1,1,2,6,7,8,9,1,1,1,2,6,7,8,9,1,1,1,13,1,6,7,8,9,1,1,1,1,1,1,1,1,1,6,7,8,9,1,1,1,1,1,1,1,2,6,7,8,9,1,1,1,1,1,1,1,1,0,0,0,14,15,16,0,16,16,0,16,0,17,17],"f":[null,[[],["constrainedfloat",3]],null,null,null,[[],["constrainedfloat",3]],null,[[],["constrainedfloat",3]],null,[[],["constrainedfloat",3]],null,[[],["constrainedfloat",3]],null,[[],["constrainedfloat",3]],null,[[],["constrainedfloat",3]],null,[[],["constrainedfloat",3]],null,[[],["constrainedfloat",3]],null,[[],["constrainedfloat",3]],null,null,null,null,null,[[],["constrainedfloat",3]],null,[[],["constrainedfloat",3]],null,[[],["constrainedfloat",3]],null,[[],["constrainedfloat",3]],null,null,null,null,null,null,null,null,null,null,[[],["constrainedfloat",3]],null,null,null,null,null,[[],["constrainedfloat",3]],null,null,null,[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3],["constrainedfloat",3]],["bool",0]],[[["n32",6],["n32",6]],["n32",6]],[[["n64",6],["n64",6]],["n64",6]],[[["r32",6],["r32",6]],["r32",6]],[[["r64",6],["r64",6]],["r64",6]],[[["constrainedfloat",3],["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3],["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3]]],[[["constrainedfloat",3],["constrainedfloat",3]]],[[["constrainedfloat",3]]],[[["constrainedfloat",3],["constrainedfloat",3]]],[[["constrainedfloat",3]],["",0]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["n32",6],["n32",6]],["n32",6]],[[["n64",6],["n64",6]],["n64",6]],[[["r32",6],["r32",6]],["r32",6]],[[["r64",6],["r64",6]],["r64",6]],[[]],[[["constrainedfloat",3],["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3],["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[],["fpcategory",4]],[[["constrainedfloat",3]],["fpcategory",4]],[[["constrainedfloat",3]],["fpcategory",4]],[[["constrainedfloat",3,[["clone",8],["clone",8]]]],["constrainedfloat",3,[["clone",8],["clone",8]]]],[[["",0],["",0]]],null,[[["constrainedfloat",3],["constrainedfloat",3]],["ordering",4]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[],["constrainedfloat",3]],[[]],[[]],[[],["u32",0]],[[],["result",4,[["constrainedfloat",3]]]],[[["constrainedfloat",3],["constrainedfloat",3]]],[[["constrainedfloat",3]]],[[["constrainedfloat",3],["constrainedfloat",3]]],[[["constrainedfloat",3]]],[[],["n32",6]],[[],["n64",6]],[[],["r32",6]],[[],["r64",6]],[[],["constrainedfloat",3]],[[]],[[["constrainedfloat",3],["constrainedfloat",3]],["bool",0]],[[["constrainedfloat",3],["",0]],["bool",0]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["total",6],["formatter",3]],["result",6]],[[["notnan",6],["formatter",3]],["result",6]],[[["finite",6],["formatter",3]],["result",6]],[[["constrainedfloat",3],["formatter",3]],["result",6]],[[["constrainedfloat",3],["formatter",3]],["result",6]],[[["constrainedfloat",3],["formatter",3]],["result",6]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["finite",6]],["total",6]],[[["notnan",6]],["total",6]],[[["finite",6]],["notnan",6]],[[],["option",4,[["constrainedfloat",3]]]],[[],["constrainedfloat",3]],[[]],[[["f32",0]],["option",4,[["constrainedfloat",3]]]],[[["f64",0]],["option",4,[["constrainedfloat",3]]]],[[["i16",0]],["option",4,[["constrainedfloat",3]]]],[[["i32",0]],["option",4,[["constrainedfloat",3]]]],[[["i64",0]],["option",4,[["constrainedfloat",3]]]],[[["i8",0]],["option",4,[["constrainedfloat",3]]]],[[],["constrainedfloat",3]],[[["isize",0]],["option",4,[["constrainedfloat",3]]]],[[["str",0]],["result",4,[["constrainedfloat",3]]]],[[["str",0],["u32",0]],["result",4,[["constrainedfloat",3]]]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["u16",0]],["option",4,[["constrainedfloat",3]]]],[[["u32",0]],["option",4,[["constrainedfloat",3]]]],[[["u64",0]],["option",4,[["constrainedfloat",3]]]],[[["u8",0]],["option",4,[["constrainedfloat",3]]]],[[["usize",0]],["option",4,[["constrainedfloat",3]]]],null,[[["constrainedfloat",3],["",0]]],[[]],[[["n32",6],["n32",6]],["n32",6]],[[["n64",6],["n64",6]],["n64",6]],[[["r32",6],["r32",6]],["r32",6]],[[["r64",6],["r64",6]],["r64",6]],[[["constrainedfloat",3],["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3],["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[],["constrainedfloat",3]],[[]],[[["constrainedfloat",3]]],[[["constrainedfloat",3]]],[[]],[[["constrainedfloat",3]]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[],["bool",0]],[[["n32",6]],["bool",0]],[[["n64",6]],["bool",0]],[[["r32",6]],["bool",0]],[[["r64",6]],["bool",0]],[[],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[],["bool",0]],[[["n32",6]],["bool",0]],[[["n64",6]],["bool",0]],[[["r32",6]],["bool",0]],[[["r64",6]],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[["constrainedfloat",3]],["bool",0]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["n32",6],["n32",6]],["n32",6]],[[["n64",6],["n64",6]],["n64",6]],[[["r32",6],["r32",6]],["r32",6]],[[["r64",6],["r64",6]],["r64",6]],[[["constrainedfloat",3],["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3],["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["n32",6],["n32",6]],["n32",6]],[[["n64",6],["n64",6]],["n64",6]],[[["r32",6],["r32",6]],["r32",6]],[[["r64",6],["r64",6]],["r64",6]],[[]],[[["constrainedfloat",3],["constrainedfloat",3]],["constrainedfloat",3]],[[],["n32",6]],[[],["n64",6]],[[],["r32",6]],[[],["r64",6]],[[]],[[],["constrainedfloat",3]],[[]],[[],["constrainedfloat",3]],[[["n32",6],["n32",6]],["n32",6]],[[["n64",6],["n64",6]],["n64",6]],[[["r32",6],["r32",6]],["r32",6]],[[["r64",6],["r64",6]],["r64",6]],[[["constrainedfloat",3],["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3],["constrainedfloat",3]]],[[],["n32",6]],[[],["n64",6]],[[],["r32",6]],[[],["r64",6]],[[]],[[],["constrainedfloat",3]],[[],["n32",6]],[[],["n64",6]],[[],["r32",6]],[[],["r64",6]],[[]],[[],["constrainedfloat",3]],[[],["constrainedfloat",3]],[[]],[[["constrainedfloat",3]]],[[["constrainedfloat",3],["constrainedfloat",3]]],[[]],[[["n32",6],["n32",6],["n32",6]],["n32",6]],[[["n64",6],["n64",6],["n64",6]],["n64",6]],[[["r32",6],["r32",6],["r32",6]],["r32",6]],[[["r64",6],["r64",6],["r64",6]],["r64",6]],[[["constrainedfloat",3],["constrainedfloat",3],["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3],["constrainedfloat",3],["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3],["constrainedfloat",3]]],[[["constrainedfloat",3]]],[[],["constrainedfloat",3]],[[["constrainedfloat",3]]],[[],["constrainedfloat",3]],[[],["constrainedfloat",3]],[[],["constrainedfloat",3]],[[["constrainedfloat",3],["constrainedfloat",3]],["option",4,[["ordering",4]]]],[[["constrainedfloat",3],["",0]],["option",4,[["ordering",4]]]],[[]],[[["n32",6],["n32",6]],["n32",6]],[[["n64",6],["n64",6]],["n64",6]],[[["r32",6],["r32",6]],["r32",6]],[[["r64",6],["r64",6]],["r64",6]],[[["constrainedfloat",3],["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3],["constrainedfloat",3]],["constrainedfloat",3]],[[["i32",0]]],[[["n32",6],["i32",0]],["n32",6]],[[["n64",6],["i32",0]],["n64",6]],[[["r32",6],["i32",0]],["r32",6]],[[["r64",6],["i32",0]],["r64",6]],[[["i32",0]]],[[["constrainedfloat",3],["i32",0]],["constrainedfloat",3]],[[["constrainedfloat",3],["i32",0]],["constrainedfloat",3]],[[],["constrainedfloat",3]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3],["constrainedfloat",3]],["bool",0]],[[["constrainedfloat",3],["constrainedfloat",3]]],[[["constrainedfloat",3]]],[[["constrainedfloat",3]]],[[["constrainedfloat",3],["constrainedfloat",3]]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["result",4]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["n32",6]]],[[["n64",6]]],[[["r32",6]]],[[["r64",6]]],[[]],[[["constrainedfloat",3]]],[[["constrainedfloat",3]]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]]],[[["constrainedfloat",3],["constrainedfloat",3]]],[[["constrainedfloat",3],["constrainedfloat",3]]],[[["constrainedfloat",3]]],[[],["constrainedfloat",3]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[],["u64",0]],[[["constrainedfloat",3]],["u64",0]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[]],[[["constrainedfloat",3]],["option",4,[["f32",0]]]],[[["constrainedfloat",3]],["option",4,[["f64",0]]]],[[["constrainedfloat",3]],["option",4,[["i16",0]]]],[[["constrainedfloat",3]],["option",4,[["i32",0]]]],[[["constrainedfloat",3]],["option",4,[["i64",0]]]],[[["constrainedfloat",3]],["option",4,[["i8",0]]]],[[["constrainedfloat",3]],["option",4,[["isize",0]]]],[[["",0]]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[]],[[["",0]],["string",3]],[[["constrainedfloat",3]],["option",4,[["u16",0]]]],[[["constrainedfloat",3]],["option",4,[["u32",0]]]],[[["constrainedfloat",3]],["option",4,[["u64",0]]]],[[["constrainedfloat",3]],["option",4,[["u8",0]]]],[[["constrainedfloat",3]],["option",4,[["usize",0]]]],[[]],[[["n32",6]],["n32",6]],[[["n64",6]],["n64",6]],[[["r32",6]],["r32",6]],[[["r64",6]],["r64",6]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[]],[[["constrainedfloat",3]],["constrainedfloat",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["constrainedfloat",3],["constrainedfloat",3],["u32",0]],["bool",0]],[[],["constrainedfloat",3]],null,null,null,[[["",0],["",0]],["ordering",4]],[[["",0],["",0]],["bool",0]],[[["",0]],["bool",0]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[["",0],["",0]]],null,[[["",0],["",0]]],[[["",0],["",0]]]],"p":[[3,"ConstrainedFloat"],[8,"Real"],[8,"Encoding"],[8,"Infinite"],[8,"Nan"],[6,"N32"],[6,"N64"],[6,"R32"],[6,"R64"],[6,"Total"],[6,"NotNan"],[6,"Finite"],[8,"ToCanonicalBits"],[8,"FloatOrd"],[8,"FloatEq"],[8,"IntrinsicOrd"],[8,"FloatHash"]]},\
"plexus":{"doc":"<strong>Plexus</strong> is a highly composable library for polygonal mesh …","t":[18,8,16,8,16,8,3,4,8,13,3,16,8,8,13,10,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,0,11,0,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,12,12,12,13,4,16,16,8,8,13,13,13,8,8,16,16,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,16,16,16,16,16,16,16,16,8,16,16,8,8,16,16,16,11,10,10,10,10,10,3,6,16,16,8,8,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,8,8,16,16,16,16,8,10,0,13,8,13,6,3,8,13,13,8,8,13,8,6,13,13,13,13,13,13,13,13,13,13,13,6,3,4,3,4,3,8,13,4,13,13,13,8,13,13,13,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,11,5,10,11,10,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,10,11,12,12,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,8,8,8,8,8,3,13,13,4,4,8,16,3,4,13,6,16,3,13,6,13,13,3,8,6,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,4,13,8,13,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,13,16,3,8,3,3,13,13,13,2,13,2,13,8,13,16,3,8,3,3,13,16,13,16,8,3,8,3,8,3,13,8,4,4,16,3,3,8,3,4,8,8,13,13,13,13,13,16,8,3,8,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,8,16,3,6,6,8,16,8,8,3,16,8,8,8,3,8,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,12,4,6,13,4,16,3,8,8,8,13,13,3,16,16,13,16,8,8,6,8,6,3,16,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,5,12,12,12,12,3,3,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,8,8,8,8,8,16,16,16,16,8,8,8,8,11,11,11,10,11,11,11,11,10,11,11,10,10,10,10,11,11,11,11,10,11,10,11,11,11,10,11,11,11,11,10,11,11,8,8,8,8,3,8,8,3,16,16,16,8,3,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ARITY","Arity","Dynamic","DynamicArity","Error","IteratorExt","Keys","MeshArity","Monomorphic","NonUniform","Perimeter","Static","StaticArity","TryFromIterator","Uniform","arity","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","builder","clone","clone","clone","clone_into","clone_into","clone_into","collect_with_indexer","constant","encoding","eq","fmt","from","from","from","from_components","from_geometry","from_geometry","from_geometry","from_subset","from_subset","from_subset","geometry","graph","has_at_least","has_exactly","index","inlined_clone","integration","into","into","into","into_geometry","into_geometry","into_geometry","into_interval","into_interval","into_iter","into_iter","is_in_subset","is_in_subset","is_in_subset","keys","ne","next","next","perimeter","prelude","primitive","size_hint","size_hint","subdivide","tetrahedrons","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","triangulate","try_collect","try_from","try_from","try_from","try_from_iter","try_into","try_into","try_into","type_id","type_id","type_id","vertices","vzip","vzip","vzip","0","0","1","ArityConflict","BufferError","Error","Error","FromRawBuffers","FromRawBuffersWithArity","IndexOutOfBounds","IndexOverflow","IndexUnaligned","IntoFlatIndex","IntoStructuredIndex","Item","Item","MeshBuffer","MeshBuffer3","MeshBuffer4","MeshBufferN","append","append","arity","arity","arity","arity","as_index_slice","as_vertex_slice","borrow","borrow","borrow_mut","borrow_mut","builder","default","eq","fmt","fmt","fmt","from","from","from","from_encoding","from_geometry","from_geometry","from_indexer","from_iter","from_ply","from_raw_buffers","from_raw_buffers","from_raw_buffers","from_raw_buffers_with_arity","from_subset","from_subset","into","into","into_flat_index","into_flat_index","into_flat_index","into_flat_index","into_geometry","into_geometry","into_polygons","into_polygons","into_polygons","into_raw_buffers","into_structured_index","into_structured_index","into_structured_index","into_structured_index","is_in_subset","is_in_subset","map_vertices","ne","new","to_string","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","actual","expected","Buildable","Builder","Builder","Builder","Error","Facet","Facet","Facet","Facet","FacetBuilder","Key","Key","MeshBuilder","SurfaceBuilder","Vertex","Vertex","Vertex","build","builder","facets_with","insert_facet","insert_vertex","surface_with","Constant","ConstantOf","Output","Output","ToConstant","ToType","TypeOf","borrow","borrow_mut","from","from_geometry","from_subset","into","into_geometry","is_in_subset","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Error","Face","FaceDecoder","FromEncoding","Index","Output","Output","Vertex","VertexDecoder","from_encoding","ply","Char","DecodePosition","Double","Element","ElementDefinition","ElementExt","ElementNotFound","EncodingIncompatible","FaceElementDecoder","FacePropertyDecoder","Float","FromPly","Header","Int","Io","List","ListChar","ListDouble","ListFloat","ListInt","ListShort","ListUChar","ListUInt","ListUShort","Payload","Ply","PlyError","PositionEncoding","Property","PropertyDefinition","PropertyExt","PropertyNotFound","PropertyType","PropertyTypeConflict","Scalar","Short","ToPly","UChar","UInt","UShort","VertexElementDecoder","VertexPropertyDecoder","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","count","data_type","decode_elements","decode_face_elements","decode_face_properties","decode_face_properties","decode_face_properties","decode_position","decode_vertex_elements","decode_vertex_properties","decode_vertex_properties","decode_vertex_properties","default","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_ply","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","get_key","get_key","header","into","into","into","into","into","into","into","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_list","into_list","into_scalar","into_scalar","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","list","list","name","name","ne","ne","ne","ne","new","new","parse","payload","properties","scalar","scalar","to_owned","to_owned","to_owned","to_owned","to_ply","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","Aabb","AsPosition","AsPositionMut","FromGeometry","Intersection","IntoGeometry","Line","Line","Line","LineLine","LinePlane","Metric","Output","Plane","PlaneRay","Point","Position","Position","Ray","Ray","Scalar","TimeOfImpact","TimeOfImpact","Unit","UnitGeometry","Vector","as_position","as_position_mut","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","direction","direction","endpoint","eq","eq","eq","eq","eq","eq","eq","extent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_points","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","get","inlined_clone","inlined_clone","inlined_clone","inlined_clone","inlined_clone","inlined_clone","inlined_clone","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","into","into","into","into","into","into","into","into","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_inner","into_line","into_line","into_line","into_point","into_ray","into_ray","into_time_of_impact","into_time_of_impact","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","lower_bound","map_position","ne","ne","ne","ne","ne","ne","ne","neg","neg","normal","origin","origin","origin","origin","partition","partition","partition","reverse","reverse","slope","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_inner","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_set","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","upper_bound","volume","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","x","x","x_intercept","y","y","y_intercept","z","z","0","0","0","0","0","0","BinaryPartition","Left","PointPartition","Right","borrow","borrow_mut","clone","clone_into","eq","from","from_geometry","from_subset","get_hash","hash","into","into_geometry","is_in_subset","partition","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Arc","Arc","ArcKey","ArcNormal","ArcOrphan","ArcView","ArityConflict","ArityNonPolygonal","ArityNonUniform","ByIndex","ByIndex","ByKey","ByKey","ClosedView","Edge","Edge","EdgeKey","EdgeMidpoint","EdgeOrphan","EdgeView","EncodingIncompatible","Entity","Face","Face","FaceCentroid","FaceKey","FaceNormal","FaceOrphan","FacePlane","FaceView","Geometry","GraphData","GraphError","GraphKey","Key","MeshGraph","Path","Rebind","Ring","Selector","ToArc","ToRing","TopologyConflict","TopologyMalformed","TopologyNotFound","TopologyUnreachable","Vertex","Vertex","VertexCentroid","VertexKey","VertexNormal","VertexOrphan","VertexPosition","VertexView","aabb","adjacent_arc_orphans","adjacent_arcs","adjacent_face_orphans","adjacent_face_orphans","adjacent_face_orphans","adjacent_faces","adjacent_faces","adjacent_faces","adjacent_vertex_orphans","adjacent_vertex_orphans","adjacent_vertex_orphans","adjacent_vertices","adjacent_vertices","adjacent_vertices","arc","arc","arc","arc","arc","arc","arc","arc_count","arc_mut","arc_orphans","arc_orphans","arcs","arcs","arcs","arity","arity","arity","back","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boundary_arc","bridge","bridge","builder","centroid","centroid","centroid","centroid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","destination_vertex","disjoint_subgraph_vertices","edge","edge","edge_count","edge_mut","edge_orphans","edges","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extrude_contour_with","extrude_surface_with","extrude_with","extrude_with","extrude_with_offset","extrude_with_offset","extrude_with_translation","extrude_with_translation","face","face","face","face_count","face_mut","face_orphans","faces","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_encoding","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_indexer","from_iter","from_ply","from_raw_buffers","from_raw_buffers_with_arity","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","front","get","get","get","get","get","get","get","get","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_or_insert_face","get_or_insert_face_with","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","incoming_arc_orphans","incoming_arcs","index_or_else","inlined_clone","inlined_clone","inlined_clone","inlined_clone","inlined_clone","inlined_clone","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_adjacent_arc_orphans","into_adjacent_arcs","into_adjacent_face_orphans","into_adjacent_face_orphans","into_adjacent_face_orphans","into_adjacent_faces","into_adjacent_faces","into_adjacent_faces","into_adjacent_vertex_orphans","into_adjacent_vertex_orphans","into_adjacent_vertex_orphans","into_adjacent_vertices","into_adjacent_vertices","into_adjacent_vertices","into_arc","into_arc","into_arc","into_arc","into_arc","into_arc","into_arc_orphans","into_arcs","into_boundary_arc","into_destination_vertex","into_disjoint_subgraphs","into_edge","into_face","into_face","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_incoming_arc_orphans","into_incoming_arcs","into_next_arc","into_opposite_arc","into_opposite_path","into_outgoing_arc","into_outgoing_arcs","into_path","into_path","into_polygons","into_previous_arc","into_ref","into_ref","into_ref","into_ref","into_ref","into_ref","into_ring","into_ring","into_ring","into_ring","into_ring","into_shortest_path","into_shortest_path_with","into_source_vertex","into_vertex_orphans","into_vertices","is_boundary_arc","is_boundary_edge","is_closed","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_open","key","key","key","key","key","key","key","key","key","key_or_else","merge","midpoint","midpoint","midpoint","ne","ne","ne","ne","ne","ne","ne","new","next_arc","normal","normal","normal","normal","normal","normal","opposite_arc","opposite_path","outgoing_arc","outgoing_arcs","path","path","path","path_mut","plane","plane","poke_at_centroid","poke_with","poke_with_offset","pop_back","pop_front","position","position","previous_arc","push_back","push_front","push_next_arc","push_previous_arc","rebind","remove","remove","remove","ring","ring","ring","ring","ring","shortest_logical_metric","shortest_metric_with","shortest_path","shortest_path_with","shrink_to_fit","smooth","source_vertex","split","split","split_at_midpoint","split_at_path","split_with","to_mesh_by_face","to_mesh_by_face_with","to_mesh_by_vertex","to_mesh_by_vertex_with","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ref","to_ref","to_ref","to_ref","to_ref","to_ref","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","traverse_by_breadth","traverse_by_breadth","traverse_by_depth","traverse_by_depth","triangulate","triangulate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","valence","vertex","vertex_count","vertex_mut","vertex_orphans","vertex_orphans","vertices","vertices","vertices","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","actual","expected","0","0","0","0","0","0","CollectWithIndexer","Error","Flat","Flat3","Flat4","FromIndexer","Group","GroupedIndexVertices","Grouping","HashIndexer","Index","IndexBuffer","IndexVertices","Indexer","LruIndexer","Push","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","collect_with_indexer","default","default","fmt","from","from","from","from_geometry","from_geometry","from_geometry","from_indexer","from_subset","from_subset","from_subset","index","index","index","index_vertices","index_vertices","index_vertices_with","index_vertices_with","into","into","into","into_geometry","into_geometry","into_geometry","is_in_subset","is_in_subset","is_in_subset","new","new","push","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with_capacity","cgmath","decorum","glam","mint","nalgebra","theon","ultraviolet","ByIndex","ByKey","Selector","_","_","_","_","_","_","_","_","_","_","_","_","_","_","_","_","_","_","_","_","_","_","_","_","_","_","_","_","0","BoundedPolygon","Edge","Edge","EdgeEdge","Indexed","InteriorMap","IntoIndexed","IntoPolygons","MapVertices","N3","N4","NGon","Output","Output","Point","Polygon","Polygonal","Rotate","Tetragon","Topological","Trigon","UnboundedPolygon","Vertex","Zip","arity","arity","arity","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cloned","cloned","collect_with_indexer","converged","cube","decompose","edges","embed_into_e3_plane","embed_into_e3_plane_with","embed_into_e3_xy","embed_into_e3_xy_with","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from_geometry","from_geometry","from_geometry","from_geometry","from_geometry","from_items","from_items","from_subset","from_subset","from_subset","from_subset","from_subset","generate","index","index","index","index_mut","index_mut","index_mut","inlined_clone","inlined_clone","inlined_clone","intersection","into","into","into","into","into","into_array","into_edge","into_edges","into_edges","into_edges","into_geometry","into_geometry","into_geometry","into_geometry","into_geometry","into_indexed","into_indexed","into_indexed","into_indexed","into_items","into_items","into_items","into_iter","into_iter","into_iter","into_iter","into_point","into_polygons","into_subdivisions","into_subdivisions","into_subdivisions","into_tetrahedrons","into_trigons","into_trigons","into_trigons","into_vertices","into_vertices","into_vertices","is_bisected","is_bisected","is_convex","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","line","line","map","map","map","map_vertices","ne","ne","ne","ne","new","new","new","new","new","new","next","plane","plane","positions","positions","project_into_plane","rotate","rotate","rotate","rotate","rotate","size_hint","sphere","subdivide","tetragon","tetrahedrons","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","triangulate","trigon","try_from","try_from","try_from","try_from","try_from","try_from_iter","try_from_iter","try_from_slice","try_from_slice","try_from_slice","try_from_slice","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vertices","vzip","vzip","vzip","vzip","vzip","zip","zip_map","zip_vertices","0","0","0","0","Bounds","Cube","Nxy","Nxz","Nyz","Plane","Xy","Xz","Yz","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","eq","fmt","from","from","from","from_geometry","from_geometry","from_geometry","from_subset","from_subset","from_subset","get_hash","hash","indexing_polygon","indexing_polygon","indexing_polygon","inlined_clone","into","into","into","into_geometry","into_geometry","into_geometry","is_in_subset","is_in_subset","is_in_subset","new","normal","polygon_count","polygon_from","polygon_from","polygon_from","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unit_radius","unit_width","vertex_count","vertex_count","vertex_count","vertex_from","vertex_from","vertex_from","vzip","vzip","vzip","with_radius","with_width","Decompose","Edges","IntoEdges","IntoSubdivisions","IntoTetrahedrons","IntoTrigons","IntoVertices","Output","Output","Output","Output","Subdivide","Tetrahedrons","Triangulate","Vertices","borrow","borrow_mut","collect_with_indexer","edges","from","from_geometry","from_subset","into","into_edges","into_geometry","into_iter","into_subdivisions","into_tetrahedrons","into_trigons","into_vertices","is_in_subset","next","remap","size_hint","subdivide","subdivide","tetrahedrons","tetrahedrons","to_subset","to_subset_unchecked","triangulate","triangulate","try_from","try_into","type_id","vertices","vertices","vzip","Attribute","AttributeGenerator","AttributePolygonGenerator","AttributeVertexGenerator","Generate","Generator","IndexingPolygonGenerator","Normal","Output","Output","Output","PolygonGenerator","Position","State","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","collect_with_indexer","from","from","from","from_geometry","from_geometry","from_geometry","from_subset","from_subset","from_subset","indexing_polygon","indexing_polygons","into","into","into","into_geometry","into_geometry","into_geometry","into_iter","is_in_subset","is_in_subset","is_in_subset","next","polygon_count","polygon_from","polygons","polygons_from","size_hint","subdivide","tetrahedrons","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","triangulate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vertex_count","vertex_from","vertices","vertices","vertices_from","vzip","vzip","vzip","Bounds","UvSphere","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","from","from","from_geometry","from_geometry","from_subset","from_subset","indexing_polygon","indexing_polygon","into","into","into_geometry","into_geometry","is_in_subset","is_in_subset","new","polygon_count","polygon_from","polygon_from","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","unit_radius","unit_width","vertex_count","vertex_count","vertex_from","vertex_from","vzip","vzip","with_radius","with_width"],"q":["plexus","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plexus::MeshArity","","","plexus::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plexus::buffer::BufferError","","plexus::builder","","","","","","","","","","","","","","","","","","","","","","","plexus::constant","","","","","","","","","","","","","","","","","","","","","plexus::encoding","","","","","","","","","","","plexus::encoding::plyplexus::encoding::ply::PlyError","plexus::encoding::ply::Property","","","","","","","","","","","","","","","","plexus::encoding::ply::PropertyType","","","plexus::geometryplexus::geometry::LineLine","","plexus::geometry::LinePlane","","plexus::geometry::PlaneRay","","plexus::geometry::partition","","","","","","","","","","","","","","","","","","","","","","","","","plexus::graphplexus::graph::GraphError","","plexus::graph::GraphKey","","","","plexus::graph::Selector","","plexus::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plexus::integration","","","","","","","plexus::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plexus::primitiveplexus::primitive::BoundedPolygon","","plexus::primitive::EdgeEdge","","plexus::primitive::cube","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plexus::primitive::decompose","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plexus::primitive::generate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plexus::primitive::sphere","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Arity of primitives and polygonal meshes.","","Value-level arity.","","Extension methods for types implementing <code>Iterator</code>.","Iterator that maps <code>graph</code> views to their keys.","Arity of a compound structure.","Topological types with fixed and singular arity.","A compound structure has <em>non-uniform</em> arity if the arity of …","Iterator that produces a window of duplets over its input.","","Type-level arity.","","A compound structure has <em>uniform</em> arity if all of its …","","","","","","","","Linear representations of polygonal meshes.","Incremental polygonal mesh construction.","","","","","","","","Morphisms between constant generics and numeric types.","Serialization and encodings.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Geometric traits and computational geometry.","Half-edge graph representation of polygonal meshes.","Determines if an iterator provides <code>n</code> or more items.","","Indexing and aggregation.","","Integration of external crates and foreign types.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Maps an iterator over <code>graph</code> views to the keys of those …","","","","Provides an iterator over a window of duplets that …","Re-exports of commonly used types and traits.","Primitive topological structures.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The arity of a buffer or other data structure is not …","Errors concerning raw buffers and <code>MeshBuffer</code>s.","","","Conversion from raw buffers.","Conversion from raw buffers that do not encode their arity.","An index into vertex data is out of bounds.","The computation of an index causes an overflow.","The number of indices in a flat index buffer is …","","","","","Polygonal mesh composed of vertex and index buffers.","Triangular <code>MeshBuffer</code>.","Quadrilateral <code>MeshBuffer</code>.","<code>MeshBuffer</code> that supports polygons with arbitrary arity.","Appends the contents of a structured <code>MeshBuffer</code> into …","Appends the contents of a flat <code>MeshBuffer</code> into another …","","","","","Gets a slice over the index data.","Gets a slice over the vertex data.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Creates a type from raw buffers.","Creates a flat <code>MeshBuffer</code> from raw index and vertex …","Creates a structured <code>MeshBuffer</code> from raw index and vertex …","Creates a type from raw buffers with the given arity.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Converts the index buffer of a <code>MeshBuffer</code> from structured …","","Converts the index buffer of a <code>MeshBuffer</code> from flat data …","","","Converts a triangular flat <code>MeshBuffer</code> into an iterator of …","Converts a structured <code>MeshBuffer</code> into an iterator of …","Converts a quadrilateral flat <code>MeshBuffer</code> into an iterator …","Converts a <code>MeshBuffer</code> into its index and vertex buffers.","","","Converts the index buffer of a <code>MeshBuffer</code> from flat data …","Converts the index buffer of a <code>MeshBuffer</code> from flat data …","","","Maps over the vertex data in a <code>MeshBuffer</code>.","","Creates an empty <code>MeshBuffer</code>.","","","","","","","","","","","","","","The incompatible arity that was encountered.","The expected arity.","Polygonal mesh data structure that can be built …","","","","","Facet data.","","","","","Vertex key.","Facet key.","Incremental polygonal mesh builder.","","Vertex data.","","","Builds the mesh.","","Constructs facets in the surface.","Inserts a facet into the associated surface.","Inserts a vertex into the surface.","Constructs a surface.","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","PLY encoding.","","","","","Models the definition of an element.","","","A polygonal mesh data structure is not compatible with …","","","","","","","An I/O operation (read or write via the <code>Read</code> and <code>Write</code> …","Defines a sequence of scalars with the same type.","","","","","","","","","","","Errors concerning the PLY encoding.","","Wrapper used to implement a dynamic type system as …","Defines a property of an element.","","","Data type used to encode properties in the payload.","The type of a property conflicts with a decoding.","Simple, “one-number” type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Describes, how many elements appear in a PLY file.","Data type of the property: You can have simple scalars …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Name of the element.","Unique name of property.","","","","","Creates a new element definition.","Creates a new property definition.","","","An element is modeled by multiple properties, those are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Axis-aligned bounding box.","Immutable positional data.","Mutable positional data.","","Intersection of geometric objects.","","Line.","","","Intersection of lines.","Intersection of a line and a plane.","","","","Intersection of a plane and a ray.","","","","Ray or half-line.","","The scalar of a <code>EuclideanSpace</code>.","","","Unit vector.","Geometry elision.","The vector (translation, coordinate space, etc.) of a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The unit direction(s) in which the line extends from its …","The unit direction in which the ray extends from its …","","","","","","","","","The <em>extent</em> of the bounding box.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Creates an <code>Aabb</code> from a set of points.","","","","","","","","","","","","","","","","","","","Determines if a line intersects a plane at a point or lies …","","","","","Determines the minimum and maximum <em>times of impact</em> of a <code>Ray</code>","Determines if a ray intersects a plane at a point or lies …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The origin or contained point of the line.","The origin or initial point of the ray.","The <em>origin</em> of the bounding box.","","","","","","Reverses the direction of the ray.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Unit</code> from a non-zero magnitude vector.","","","","","","","","","","","","","","","","","","","","Gets the Lebesgue measure ($n$-dimensional volume) of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Arc key.","","Orphan view of an arc entity.","View of an arc entity.","The arity of a <code>MeshGraph</code> or other data structure is not …","","The compound arity of a <code>MeshGraph</code> or other data structure …","","","","","","","","Edge key.","","Orphan view of an edge entity.","View of an edge entity.","A graph or other data structure is not compatible with an …","","","","","Face key.","","Orphan view of a face entity.","","View of a face entity.","Geometry is incompatible or cannot be computed.","Graph data.","Errors concerning <code>MeshGraph</code>s.","","","Half-edge graph representation of a polygonal mesh.","Non-intersecting path.","","Closed path formed by adjacent arcs.","Entity selector.","","","","","","","","","","Vertex key.","","Orphan view of a vertex entity.","","View of a vertex entity.","Gets an axis-aligned bounding box that encloses the graph.","Gets an iterator of orphan views over the arcs in the face…","Gets an iterator of views over the arcs in the face’s …","Gets an iterator of orphan views over the faces connected …","Gets an iterator of orphan views over adjacent faces.","Gets an iterator of orphan views over the adjacent faces …","Gets an iterator of views over the faces connected to the …","Gets an iterator of views over adjacent faces.","Gets an iterator of views over the adjacent faces of the …","Gets an iterator of orphan views over the vertices …","Gets an iterator of orphan views over the vertices that …","","Gets an iterator of views over the vertices connected by …","Gets an iterator of views over the vertices that form the …","","","","","","Gets the leading arc of the face.","Gets the leading arc of the ring.","Gets an immutable view of the arc with the given key.","Gets the number of arcs in the graph.","Gets a mutable view of the arc with the given key.","Gets an iterator of orphan views over the arcs in the ring.","Gets an iterator of orphan views over the arcs in the …","Gets an iterator of views over the arcs within the ring.","Gets an iterator of immutable views over the arcs in the …","Gets an iterator over the arcs in the path.","Gets the arity of the face. This is the number of arcs …","Gets the arity of the ring. This is the number of arcs …","","Gets the vertex at the back of the path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the same arc if it is a boundary arc, otherwise …","Connects the arc to another arc by inserting a face.","Connects faces with equal arity with faces inserted along …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the destination vertex of the arc.","Gets an iterator over a vertex within each disjoint …","Gets the edge of the arc.","Gets an immutable view of the edge with the given key.","Gets the number of edges in the graph.","Gets a mutable view of the edge with the given key.","Gets an iterator of orphan views over the edges in the …","Gets an iterator of immutable views over the edges in the …","","","","","","","","","","","","","","","","","","Extrudes the contour of a boundary path.","Extrudes the surface of a closed path.","Extrudes the arc using the given vertex data.","Extrudes a face using the given vertex data.","Extrudes the arc along its normal.","Extrudes the face along its normal.","Extrudes the arc along a translation.","Extrudes the face along a translation.","Gets the face of this arc.","Gets the face of the ring.","Gets an immutable view of the face with the given key.","Gets the number of faces in the graph.","Gets a mutable view of the face with the given key.","Gets an iterator of orphan views over the faces in the …","Gets an iterator of immutable views over the faces in the …","Flattens the face by translating the positions of all …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>MeshGraph</code> from raw buffers. The arity of the …","","","","","","","","","","","","","","","","","","","Gets the vertex at the front of the path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the face of the ring or inserts a face if one does …","Gets the face of the ring or inserts a face if one does …","","","","","","","","","","","","","Gets an iterator of orphan views over the incoming arcs of …","Gets an iterator of views over the incoming arcs of the …","Gets the selector’s index or passes its key to a …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Converts the face into its leading arc.","Converts the ring into its leading arc.","","","Returns the arc if it is a boundary arc, otherwise <code>None</code>.","Converts the arc into its destination vertex.","Moves disjoint sub-graphs into separate graphs.","Converts the arc into its edge.","Converts the arc into its face.","Converts the ring into its face.","","","","","","","","","","","","","","","","","","","","","Converts the arc into its next arc.","Converts the arc into its opposite arc.","Converts the path into its opposite path.","Converts the vertex into its outgoing (leading) arc.","","","","","Converts the arc into its previous arc.","Examples","","Examples","","Examples","Converts a mutable view into an immutable view.","","Converts the arc into its ring.","","Converts the face into its ring.","","","","Converts the arc into its source vertex.","","","Returns <code>true</code> if this is a boundary arc.","","Returns <code>true</code> if the path is closed.","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the path is open.","","Gets the key for the arc.","","Gets the key for the edge.","","Gets the key for the face.","","","","Gets the selector’s key or passes its index to a …","Merges the face into an adjacent face over a shared edge.","","","","","","","","","","","Creates an empty <code>MeshGraph</code>.","Gets the next arc.","","","","","","","Gets the opposite arc.","Gets the opposite path.","Gets the outgoing (leading) arc of the vertex.","Gets an iterator of views over the outgoing arcs of the …","","","Gets an immutable path over the given sequence of vertex …","Gets a mutable path over the given sequence of vertex keys.","","","Subdivides the face about its centroid. A triangle fan is …","Subdivides the face about a vertex. A triangle fan is …","Subdivides the face about its centroid. A triangle fan is …","Pops a vertex from the back of the path.","Pops a vertex from the front of the path.","","","Gets the previous arc.","Pushes a vertex onto the back of the path.","Pushes a vertex onto the front of the path.","Pushes the destination vertex of the next arc onto the …","Pushes the source vertex of the previous arc onto the back …","","Removes the arc and its composite edge.","Removes the face.","Removes the vertex.","","Gets the ring of the arc.","","Gets the ring of the face.","","Gets the shortest logical metric between vertices within …","","","","Shrinks the capacity of the graph’s underlying storage …","Smooths the positions of vertices in the graph.","Gets the source vertex of the arc.","Splits the face by bisecting it with a composite edge …","Splits the path into two immutable paths at the given …","Splits the composite edge of the arc at its midpoint.","Splits the graph along a path.","Splits the composite edge of the arc into two adjacent …","Creates a <code>Buildable</code> mesh data structure from the graph.","Creates a <code>Buildable</code> mesh data structure from the graph.","Creates a <code>Buildable</code> mesh data structure from the graph.","Creates a <code>Buildable</code> mesh data structure from the graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator that traverses adjacent faces by breadth.","Gets an iterator that traverses adjacent vertices by …","Gets an iterator that traverses adjacent faces by depth.","Gets an iterator that traverses adjacent vertices by depth.","Decomposes the face into triangles. Does nothing if the …","Triangulates the graph, tessellating all faces into …","","","","","","","","","","Creates a <code>MeshGraph</code> from a structured <code>MeshBuffer</code>.","Creates a <code>MeshGraph</code> from a flat <code>MeshBuffer</code>. The arity of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the valence of the vertex.","Gets an immutable view of the vertex with the given key.","Gets the number of vertices in the graph.","Gets a mutable view of the vertex with the given key.","Gets an iterator of views over the vertices within the …","Gets an iterator of orphan views over the vertices in the …","Gets an iterator of views over the vertices within the …","Gets an iterator of immutable views over the vertices in …","Gets an iterator over the vertices in the path.","","","","","","","","","","","","","","","","","","","The incompatible arity that was encountered.","The expected arity.","","","","","","","Functions for collecting an iterator of $n$-gons into a …","","Flat index buffer meta-grouping.","Alias for a flat and triangular index buffer.","Alias for a flat and quadrilateral index buffer.","","","Functions for collecting an iterator of $n$-gons into raw …","","Hashing vertex indexer.","The type of individual indices in the buffer.","Index buffer.","Functions for collecting an iterator of $n$-gons into raw …","Vertex indexer.","LRU caching vertex indexer.","","","","","","","","Collects an iterator of $n$-gons into a mesh data …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Indexes a vertex using a keying function.","","","","Indexes an iterator of $n$-gons into raw index and vertex …","","Indexes an iterator of $n$-gons into raw index and vertex …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Creates a new <code>HashIndexer</code>.","Creates a new <code>LruIndexer</code> with a default capacity.","","","","","","","","","","","","","","","","","","","","Creates a new <code>LruIndexer</code> with the specified capacity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bounded polymorphic $n$-gon.","","","Intersection of edges.","","","","","","","","Monomorphic $n$-gon.","","","","","Polygonal structure.","","Quadrilateral.","Topological structure.","Triangle.","Unbounded polymorphic $n$-gon.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cube primitives.","Decomposition and tessellation.","","Embeds an $n$-gon from $\\\\Reals^2$ into $\\\\Reals^3$.","","Embeds an $n$-gon from $\\\\Reals^2$ into $\\\\Reals^3$.","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","Polytope generation.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Determines if the polygon is convex.","","","","","","","","","","","","","","","","","","","","","","","","","","","Projects an $n$-gon into a plane.","","","","","","","Sphere primitives.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Zips the vertices of <code>Topological</code> types from multiple …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Reapplies a congruent decomposition.","","","","","","","","","","","","","","","","Geometric attribute.","","","","Iterator that generates topology and geometric attributes.","Functions for iterating over the topology and geometry of …","","Meta-attribute for surface normals.","","","","","Meta-attribute for positions.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Gets an iterator over a set of polygons that index the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Gets an iterator over the set of polygons with the given …","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the set of <strong>unique</strong> vertices with the …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,2,0,3,0,0,0,0,4,0,1,0,0,4,2,4,5,6,4,5,6,0,0,4,5,6,4,5,6,6,0,0,4,4,4,5,6,4,4,5,6,4,5,6,0,0,7,7,0,4,0,4,5,6,4,5,6,8,4,5,6,4,5,6,7,4,5,6,7,0,0,5,6,6,6,4,5,6,4,5,6,4,5,6,6,7,4,5,6,3,4,5,6,4,5,6,6,4,5,6,9,10,10,11,0,12,13,0,0,11,11,11,0,0,14,15,0,0,0,0,16,16,16,16,16,16,16,16,11,16,11,16,16,16,11,11,11,16,11,16,16,16,11,16,16,16,16,12,16,16,13,11,16,11,16,14,16,16,16,11,16,16,16,16,16,15,16,16,16,11,16,16,11,16,11,11,16,11,16,11,16,11,16,11,16,11,16,17,17,0,18,19,20,18,18,19,20,21,0,20,21,0,0,18,19,20,19,18,20,21,20,19,0,0,22,23,0,0,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,26,0,0,26,27,26,27,0,25,0,28,0,28,0,0,0,29,29,0,0,28,0,0,28,29,30,28,28,28,28,28,28,28,28,0,0,0,0,0,0,0,29,0,29,30,28,0,28,28,28,0,0,31,32,33,30,34,28,29,31,32,33,30,34,28,29,32,33,30,28,32,33,30,28,32,33,0,35,0,36,34,37,38,0,39,34,34,32,33,30,28,32,33,30,28,29,29,31,32,33,30,34,28,29,29,31,32,33,30,34,28,29,40,31,32,33,30,34,28,29,32,33,31,31,32,33,30,34,28,29,31,32,33,30,34,28,29,41,28,41,28,31,32,33,30,34,28,29,42,43,32,33,32,33,30,28,32,33,31,31,32,42,43,32,33,30,28,44,29,31,32,33,30,34,28,29,31,32,33,30,34,28,29,31,32,33,30,34,28,29,31,32,33,30,34,28,29,31,32,33,30,34,28,29,31,32,33,30,34,28,29,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,63,0,0,0,0,0,0,0,64,65,0,0,0,66,0,0,64,0,67,0,68,0,65,68,0,0,0,67,69,70,70,71,64,65,72,73,74,68,70,71,64,65,72,73,74,68,70,71,64,65,72,73,74,68,70,71,64,65,72,73,74,68,70,71,72,73,71,72,73,70,71,64,65,72,73,68,73,70,71,64,65,72,73,74,68,70,71,64,65,72,73,74,68,75,70,71,64,65,72,73,74,68,73,70,71,64,65,72,73,74,68,70,70,71,64,65,72,73,68,66,71,71,72,72,73,73,73,74,74,70,71,64,65,72,73,74,68,76,70,71,64,65,72,73,74,68,70,64,65,72,64,71,68,65,68,70,71,64,65,72,73,74,68,73,69,70,71,64,65,72,73,68,70,72,74,71,72,73,74,0,71,74,70,72,71,70,71,64,65,72,73,74,68,70,71,64,65,72,73,74,68,70,71,64,65,72,73,74,68,69,70,71,64,65,72,73,74,68,70,70,71,64,65,72,73,74,68,70,70,71,64,65,72,73,74,68,73,73,73,70,71,64,65,72,73,74,68,70,71,71,70,71,71,70,71,77,78,79,80,81,82,0,83,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,84,83,83,83,83,83,83,83,85,86,0,0,0,0,87,87,87,0,88,0,88,0,85,86,0,0,0,0,87,89,85,86,0,0,0,0,0,0,87,0,0,0,89,0,0,0,0,0,0,0,87,87,87,87,85,86,0,0,0,0,0,0,90,91,91,92,91,93,92,91,93,92,91,93,92,91,93,94,92,95,95,91,96,90,90,90,96,90,96,90,97,91,96,90,97,92,92,98,98,95,95,99,99,91,91,100,96,93,93,101,101,90,102,103,104,97,105,87,88,85,92,98,95,99,91,100,96,93,101,90,102,103,104,97,105,87,88,85,92,92,91,90,106,107,91,93,92,95,91,93,102,103,104,97,105,88,85,92,95,91,93,102,103,104,97,105,88,85,90,102,103,104,105,92,95,91,93,92,95,91,93,92,90,92,90,90,90,90,90,92,98,95,99,91,100,96,93,101,102,103,104,97,105,87,88,85,97,97,92,91,92,91,92,91,92,96,90,90,90,90,90,91,102,103,104,105,87,87,88,85,92,92,98,98,95,99,99,91,100,100,96,96,93,101,101,90,90,102,102,103,104,97,97,105,87,87,88,88,88,85,85,85,85,85,90,92,98,95,99,91,100,96,93,101,90,102,103,104,97,105,87,88,85,90,90,90,90,90,92,98,95,99,91,100,96,93,101,90,102,103,104,97,105,87,88,85,97,92,98,95,99,91,100,93,101,92,98,95,99,91,93,101,102,103,104,105,85,92,98,95,99,91,100,93,101,96,96,92,98,95,99,91,93,101,102,103,104,105,85,93,93,88,102,103,104,105,88,85,92,98,95,99,91,100,96,93,101,90,102,103,104,97,105,87,88,85,91,91,92,91,93,92,91,93,92,91,93,92,91,93,94,92,95,95,91,96,96,96,92,92,90,92,92,96,92,98,95,99,91,100,96,93,101,90,102,103,104,97,105,87,88,85,93,93,92,92,97,93,93,92,96,90,92,92,95,91,96,93,97,108,92,91,91,96,93,93,92,96,96,92,95,97,92,98,95,99,91,100,96,93,101,90,102,103,104,97,105,87,88,85,97,89,92,98,95,99,91,100,93,101,88,91,109,92,95,102,103,104,105,87,88,85,90,92,110,111,112,92,91,93,92,97,93,93,92,96,90,90,113,91,91,91,91,97,97,93,101,92,97,97,97,97,114,92,91,93,108,92,91,91,96,96,97,93,93,90,90,92,91,97,92,90,92,90,90,90,90,92,95,91,93,102,103,104,97,105,88,85,92,95,91,96,93,97,87,92,98,95,99,91,100,96,93,101,90,102,103,104,97,105,87,88,85,92,98,95,99,91,100,96,93,101,90,102,103,104,97,105,87,88,85,91,93,91,93,91,90,92,98,95,99,91,100,96,93,101,90,90,90,102,103,104,97,105,87,88,85,92,98,95,99,91,100,96,93,101,90,102,103,104,97,105,87,88,85,92,98,95,99,91,100,96,93,101,90,102,103,104,97,105,87,88,85,93,90,90,90,96,90,96,90,97,92,98,95,99,91,100,96,93,101,90,102,103,104,97,105,87,88,85,115,115,116,117,118,119,120,121,0,122,0,0,0,0,123,0,0,0,124,0,0,0,0,0,125,126,127,125,126,127,128,125,126,127,125,126,127,125,126,127,122,125,126,127,129,125,126,130,131,130,131,125,126,127,125,126,127,125,126,127,125,126,132,125,126,127,125,126,127,125,126,127,125,126,127,125,126,127,125,126,127,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,0,0,134,0,135,0,0,0,0,136,136,0,137,138,134,137,0,0,0,0,0,0,139,0,133,136,140,133,136,140,133,136,140,141,133,134,136,140,141,133,134,136,140,133,134,136,140,133,134,136,140,133,140,141,133,0,0,139,139,139,139,139,133,134,136,140,133,134,136,140,133,136,141,133,133,134,136,136,136,136,136,140,140,140,141,133,134,136,140,133,140,141,133,134,136,140,0,133,136,140,133,136,140,133,134,136,142,141,133,134,136,140,133,134,133,136,140,141,133,134,136,140,135,133,136,140,133,136,140,141,133,136,140,134,137,143,144,136,144,143,144,136,133,136,140,142,133,145,141,133,134,136,140,142,133,133,136,140,146,133,134,136,140,142,143,144,133,133,133,141,143,133,133,140,139,147,142,143,144,136,141,0,141,140,141,133,134,136,140,141,133,134,136,140,141,133,134,136,140,141,140,141,133,134,136,140,133,140,139,133,136,140,141,133,134,136,140,141,133,134,136,140,141,141,133,134,136,140,138,133,0,148,149,150,151,0,0,152,152,152,0,152,152,152,152,153,154,152,153,154,152,153,154,152,153,154,153,154,152,152,152,153,154,152,153,154,152,153,154,152,152,154,154,154,152,152,153,154,152,153,154,152,153,154,154,152,154,154,154,154,152,153,154,152,153,154,152,153,154,152,153,154,152,153,154,152,153,154,153,153,154,154,154,154,154,154,152,153,154,153,153,0,0,0,0,0,0,0,155,156,157,158,0,0,0,0,159,159,159,160,159,159,159,159,156,159,159,158,161,157,155,159,159,159,159,162,159,163,159,159,159,164,159,159,159,159,165,159,159,0,0,0,0,0,0,0,0,166,167,168,0,0,169,170,171,172,170,171,172,172,170,171,172,170,171,172,170,171,172,168,173,170,171,172,170,171,172,172,170,171,172,172,174,166,173,173,172,172,172,170,171,172,170,171,172,172,170,171,172,170,171,172,170,171,172,167,167,172,173,173,170,171,172,0,0,175,176,175,176,175,176,175,176,175,176,175,176,175,176,175,176,176,176,175,176,175,176,175,176,176,176,176,176,175,176,175,176,175,176,175,176,175,176,175,176,175,175,176,176,176,176,175,176,175,175],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["mesharity",4]],["mesharity",4]],[[["perimeter",3,[["clone",8]]]],["perimeter",3,[["clone",8]]]],[[["keys",3,[["clone",8]]]],["keys",3,[["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",4]],null,null,[[["mesharity",4],["mesharity",4]],["bool",0]],[[["mesharity",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["mesharity",4]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],null,null,[[["usize",0]],["option",4,[["multipeek",3]]]],[[["usize",0]],["option",4,[["multipeek",3]]]],null,[[["",0]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mesharity",4]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["keys",3]],[[["mesharity",4],["mesharity",4]],["bool",0]],[[["perimeter",3]],["option",4]],[[["keys",3]],["option",4]],[[],["perimeter",3]],null,null,[[["perimeter",3]]],[[["keys",3]]],[[],["decompose",3]],[[],["decompose",3,[["ngon",3],["ngon",3],["arrayvec",3,[["ngon",3]]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["decompose",3,[["ngon",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["decompose",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["meshbuffer",3],["meshbuffer",3]],["result",4,[["buffererror",4]]]],[[["meshbuffer",3,[["flat",3]]],["meshbuffer",3]],["result",4,[["buffererror",4]]]],[[["meshbuffer",3,[["unboundedpolygon",3]]]]],[[["meshbuffer",3,[["boundedpolygon",4]]]]],[[["meshbuffer",3]]],[[["meshbuffer",3,[["flat",3]]]]],[[["meshbuffer",3]]],[[["meshbuffer",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[],["meshbuffer",3]],[[["buffererror",4],["buffererror",4]],["bool",0]],[[["buffererror",4],["formatter",3]],["result",6]],[[["buffererror",4],["formatter",3]],["result",6]],[[["meshbuffer",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[],["meshbuffer",3]],[[],["result",4,[["meshbuffer",3]]]],[[]],[[]],[[],["result",4,[["meshbuffer",3]]]],[[],["meshbuffer",3]],[[["read",8]],["result",4,[["plyerror",4]]]],[[],["result",4]],[[],["result",4,[["meshbuffer",3,[["flat",3]]],["buffererror",4]]]],[[],["result",4,[["meshbuffer",3],["buffererror",4]]]],[[["usize",0]],["result",4]],[[["",0]]],[[["",0]]],[[]],[[]],[[],["meshbuffer",3,[["flat",3]]]],[[["meshbuffer",3,[["trigon",6]]]],["meshbuffer",3,[["flat",3]]]],[[["meshbuffer",3,[["flat",3]]]],["meshbuffer",3,[["flat",3]]]],[[["meshbuffer",3,[["tetragon",6]]]],["meshbuffer",3,[["flat",3]]]],[[]],[[]],[[["meshbuffer",3,[["flat3",6]]]]],[[["meshbuffer",3]]],[[["meshbuffer",3,[["flat4",6]]]]],[[["meshbuffer",3]]],[[],["meshbuffer",3]],[[["meshbuffer",3]],["meshbuffer",3]],[[["meshbuffer",3,[["flat4",6]]]],["meshbuffer",3]],[[["meshbuffer",3,[["flat3",6]]]],["meshbuffer",3]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["meshbuffer",3]],["meshbuffer",3]],[[["buffererror",4],["buffererror",4]],["bool",0]],[[],["meshbuffer",3]],[[["",0]],["string",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["",0]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["elementdef",3]],["elementdef",3]],[[["propertydef",3]],["propertydef",3]],[[["propertytype",4]],["propertytype",4]],[[["property",4]],["property",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[["header",6],["payload",6]],["result",4,[["plyerror",4]]]],[[["",0],["header",6],["payload",6]],["result",4,[["plyerror",4]]]],[[["",0],["header",6],["payload",6]],["result",4,[["plyerror",4]]]],[[["",0],["elementdefinition",3]],["result",4,[["plyerror",4]]]],[[["positionencoding",3],["elementdefinition",3]],["result",4,[["plyerror",4]]]],[[["element",6]],["result",4,[["plyerror",4]]]],[[["",0],["header",6],["payload",6]],["result",4,[["plyerror",4]]]],[[["",0],["header",6],["payload",6]],["result",4,[["plyerror",4]]]],[[["",0],["elementdefinition",3]],["result",4,[["plyerror",4]]]],[[["positionencoding",3],["elementdefinition",3]],["result",4,[["plyerror",4]]]],[[],["positionencoding",3]],[[["elementdef",3],["elementdef",3]],["bool",0]],[[["propertydef",3],["propertydef",3]],["bool",0]],[[["propertytype",4],["propertytype",4]],["bool",0]],[[["property",4],["property",4]],["bool",0]],[[["elementdef",3],["formatter",3]],["result",4,[["error",3]]]],[[["propertydef",3],["formatter",3]],["result",4,[["error",3]]]],[[["propertytype",4],["formatter",3]],["result",4,[["error",3]]]],[[["property",4],["formatter",3]],["result",4,[["error",3]]]],[[["plyerror",4],["formatter",3]],["result",6]],[[["plyerror",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3]],["plyerror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["read",8]],["result",4,[["plyerror",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["elementdef",3]],["string",3]],[[["propertydef",3]],["string",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["plyerror",4]]]],[[["property",4]],["result",4,[["plyerror",4]]]],[[],["result",4,[["plyerror",4]]]],[[["property",4]],["result",4,[["plyerror",4]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["result",4,[["plyerror",4]]]],[[["element",6]],["result",4,[["plyerror",4]]]],null,null,[[["elementdef",3],["elementdef",3]],["bool",0]],[[["propertydef",3],["propertydef",3]],["bool",0]],[[["propertytype",4],["propertytype",4]],["bool",0]],[[["property",4],["property",4]],["bool",0]],[[["string",3]],["elementdef",3]],[[["string",3],["propertytype",4]],["propertydef",3]],[[["read",8]],["result",6,[["ply",3]]]],null,null,[[["",0]],["result",4,[["plyerror",4]]]],[[["element",6]],["result",4,[["plyerror",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["header",6],["write",8]],["result",4,[["usize",0],["plyerror",4]]]],[[["",0]],["string",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["unit",3]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["unit",3]],["unit",3]],[[["line",3]],["line",3]],[[["lineline",4]],["lineline",4]],[[["lineplane",4]],["lineplane",4]],[[["ray",3]],["ray",3]],[[["aabb",3]],["aabb",3]],[[["plane",3]],["plane",3]],[[["planeray",4]],["planeray",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["unit",3]],[[],["line",3]],[[],["ray",3]],[[],["aabb",3]],null,null,[[["aabb",3]]],[[["unit",3],["unit",3]],["bool",0]],[[["line",3],["line",3]],["bool",0]],[[["lineline",4],["lineline",4]],["bool",0]],[[["lineplane",4],["lineplane",4]],["bool",0]],[[["ray",3],["ray",3]],["bool",0]],[[["aabb",3],["aabb",3]],["bool",0]],[[["planeray",4],["planeray",4]],["bool",0]],null,[[["unit",3],["formatter",3]],["result",4,[["error",3]]]],[[["line",3],["formatter",3]],["result",4,[["error",3]]]],[[["lineline",4],["formatter",3]],["result",4,[["error",3]]]],[[["lineplane",4],["formatter",3]],["result",4,[["error",3]]]],[[["ray",3],["formatter",3]],["result",4,[["error",3]]]],[[["aabb",3],["formatter",3]],["result",4,[["error",3]]]],[[["plane",3],["formatter",3]],["result",4,[["error",3]]]],[[["planeray",4],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["aabb",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["unit",3]],["",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["",0]],["option",4]],[[["line",3],["line",3]],["option",4]],[[["line",3],["plane",3]],["option",4]],[[["ray",3],["plane",3]],["option",4]],[[["ray",3],["aabb",3]],["option",4]],[[["aabb",3],["",0]],["option",4]],[[["aabb",3],["aabb",3]],["option",4]],[[["aabb",3],["ray",3]],["option",4]],[[["plane",3],["ray",3]],["option",4]],[[["plane",3],["line",3]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unit",3]]],[[["lineline",4]],["option",4,[["line",3]]]],[[["lineplane",4]],["option",4,[["line",3]]]],[[["ray",3]],["line",3]],[[["lineline",4]],["option",4]],[[["line",3]],["ray",3]],[[["planeray",4]],["option",4,[["ray",3]]]],[[["lineplane",4]],["option",4]],[[["planeray",4]],["option",4]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["aabb",3]]],[[]],[[["unit",3],["unit",3]],["bool",0]],[[["line",3],["line",3]],["bool",0]],[[["lineline",4],["lineline",4]],["bool",0]],[[["lineplane",4],["lineplane",4]],["bool",0]],[[["ray",3],["ray",3]],["bool",0]],[[["aabb",3],["aabb",3]],["bool",0]],[[["planeray",4],["planeray",4]],["bool",0]],[[["unit",3]]],[[["ray",3]]],null,null,null,null,null,null,[[["line",3]],["option",4,[["binarypartition",4]]]],[[["plane",3]],["option",4,[["binarypartition",4]]]],[[["unit",3]],["unit",3]],[[["ray",3]],["ray",3]],[[["line",3]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4,[["unit",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["unit",3]],["option",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["aabb",3],["aabb",3]],["aabb",3]],[[["aabb",3]]],[[["aabb",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["unit",3]],[[],["line",3]],[[["line",3]],["option",4]],[[],["unit",3]],[[],["line",3]],[[["line",3]],["option",4]],[[],["unit",3]],[[],["line",3]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["binarypartition",4]],["binarypartition",4]],[[["",0],["",0]]],[[["binarypartition",4],["binarypartition",4]],["bool",0]],[[]],[[]],[[["",0]]],[[["",0]],["u64",0]],[[["binarypartition",4],["",0]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["option",4,[["binarypartition",4]]]],[[["",0]]],[[["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["meshgraph",3]],["aabb",3,[["vertexposition",6]]]],[[["faceview",3]],["iterator",8]],[[["faceview",3]],["",26,[["clone",8],["iterator",8]]]],[[["arcview",3]],["exactsizeiterator",8]],[[["faceview",3]],["iterator",8]],[[["vertexview",3]],["iterator",8]],[[["arcview",3]],["",26,[["clone",8],["exactsizeiterator",8]]]],[[["faceview",3]],["",26,[["clone",8],["iterator",8]]]],[[["vertexview",3]],["",26,[["clone",8],["iterator",8]]]],[[["arcview",3]],["exactsizeiterator",8]],[[["faceview",3]],["iterator",8]],[[["vertexview",3]],["iterator",8]],[[["arcview",3]],["",26,[["clone",8],["exactsizeiterator",8]]]],[[["faceview",3]],["",26,[["clone",8],["iterator",8]]]],[[["vertexview",3]],["",26,[["clone",8],["iterator",8]]]],[[["",0]],["arcview",3]],[[["arcview",3]],["arcview",3]],[[["edgeview",3]],["arcview",3]],[[["edgeview",3]],["arcview",3]],[[["faceview",3]],["arcview",3]],[[["ring",3]],["arcview",3]],[[["meshgraph",3],["arckey",3]],["option",4,[["arcview",3,[["meshgraph",3]]]]]],[[["meshgraph",3]],["usize",0]],[[["meshgraph",3],["arckey",3]],["option",4,[["arcview",3,[["meshgraph",3]]]]]],[[["ring",3]],["iterator",8]],[[["meshgraph",3]],["iterator",8]],[[["ring",3]],["",26,[["clone",8],["iterator",8]]]],[[["meshgraph",3]],["iterator",8]],[[["path",3]],["",26,[["clone",8],["exactsizeiterator",8]]]],[[["faceview",3]]],[[["ring",3]]],[[["meshgraph",3]]],[[["path",3]],["vertexview",3]],[[["",0]],["",0]],[[["arcview",3]],["arckey",3]],[[["",0]],["",0]],[[["arcorphan",3]],["arckey",3]],[[["",0]],["",0]],[[["edgeview",3]],["edgekey",3]],[[["edgeorphan",3]],["edgekey",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["faceview",3]],["facekey",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["vertexview",3]],["vertexkey",3]],[[["",0]],["",0]],[[["vertexorphan",3]],["vertexkeyarcview",3]],["option",4,[["arcview",3]]]],[[["arcview",3],["into",8,[["selector",4,[["arckey",3]]]]]],["result",4,[["faceview",3],["grapherror",4]]]],[[["faceview",3],["facekey",3]],["result",4,[["grapherror",4]]]],[[]],[[["vertexview",3]],["result",4,[["vertexposition",6],["grapherror",4]]]],[[],["result",4,[["vertexposition",6],["grapherror",4]]]],[[["faceview",3]],["vertexposition",6]],[[["vertexview",3]],["vertexposition",6]],[[["arcview",3]],["arcview",3]],[[["edgeview",3]],["edgeview",3]],[[["faceview",3]],["faceview",3]],[[["vertexview",3]],["vertexview",3]],[[["arckey",3]],["arckey",3]],[[["edgekey",3]],["edgekey",3]],[[["facekey",3]],["facekey",3]],[[["path",3,[["clone",8]]]],["path",3,[["clone",8]]]],[[["vertexkey",3]],["vertexkey",3]],[[["selector",4,[["clone",8]]]],["selector",4,[["clone",8]]]],[[["graphkey",4]],["graphkey",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["meshgraph",3]],[[],["arckey",3]],[[],["edgekey",3]],[[],["facekey",3]],[[],["vertexkey",3]],[[["arcview",3]]],[[["edgeview",3]]],[[["faceview",3]]],[[["vertexview",3]]],[[["arcview",3]]],[[["edgeview",3]]],[[["faceview",3]]],[[["vertexview",3]]],[[["arcview",3]],["vertexview",3]],[[["meshgraph",3]],["exactsizeiterator",8]],[[["arcview",3]],["edgeview",3]],[[["meshgraph",3],["edgekey",3]],["option",4,[["edgeview",3,[["meshgraph",3]]]]]],[[["meshgraph",3]],["usize",0]],[[["meshgraph",3],["edgekey",3]],["option",4,[["edgeview",3,[["meshgraph",3]]]]]],[[["meshgraph",3]],["iterator",8]],[[["meshgraph",3]],["iterator",8]],[[["arcview",3],["arcview",3]],["bool",0]],[[["arcorphan",3],["arcorphan",3]],["bool",0]],[[["edgeview",3],["edgeview",3]],["bool",0]],[[["edgeorphan",3],["edgeorphan",3]],["bool",0]],[[["faceview",3],["faceview",3]],["bool",0]],[[["faceorphan",3],["faceorphan",3]],["bool",0]],[[["ring",3],["ring",3]],["bool",0]],[[["vertexview",3],["vertexview",3]],["bool",0]],[[["vertexorphan",3],["vertexorphan",3]],["bool",0]],[[["arckey",3],["arckey",3]],["bool",0]],[[["edgekey",3],["edgekey",3]],["bool",0]],[[["facekey",3],["facekey",3]],["bool",0]],[[["path",3],["path",3]],["bool",0]],[[["vertexkey",3],["vertexkey",3]],["bool",0]],[[["grapherror",4],["grapherror",4]],["bool",0]],[[["selector",4,[["partialeq",8]]],["selector",4]],["bool",0]],[[["graphkey",4],["graphkey",4]],["bool",0]],[[["path",3]],["result",4,[["faceview",3],["grapherror",4]]]],[[["path",3]],["result",4,[["path",3],["grapherror",4]]]],[[["arcview",3]],["result",4,[["arcview",3],["grapherror",4]]]],[[["faceview",3]],["faceview",3]],[[["arcview",3]],["result",4,[["arcview",3],["grapherror",4]]]],[[["faceview",3]],["result",4,[["faceview",3],["grapherror",4]]]],[[["arcview",3],["vector",6,[["vertexposition",6]]]],["result",4,[["arcview",3],["grapherror",4]]]],[[["faceview",3],["vector",6,[["vertexposition",6]]]],["faceview",3]],[[["arcview",3]],["option",4,[["faceview",3]]]],[[["ring",3]],["option",4,[["faceview",3]]]],[[["meshgraph",3],["facekey",3]],["option",4,[["faceview",3,[["meshgraph",3]]]]]],[[["meshgraph",3]],["usize",0]],[[["meshgraph",3],["facekey",3]],["option",4,[["faceview",3,[["meshgraph",3]]]]]],[[["meshgraph",3]],["iterator",8]],[[["meshgraph",3]],["iterator",8]],[[["faceview",3]],["result",4,[["grapherror",4]]]],[[["arckey",3],["formatter",3]],["result",6]],[[["edgekey",3],["formatter",3]],["result",6]],[[["facekey",3],["formatter",3]],["result",6]],[[["vertexkey",3],["formatter",3]],["result",6]],[[["grapherror",4],["formatter",3]],["result",6]],[[["grapherror",4],["formatter",3]],["result",6]],[[["selector",4,[["debug",8]]],["formatter",3]],["result",6]],[[["graphkey",4],["formatter",3]],["result",6]],[[["ring",3]],["arcview",3]],[[]],[[]],[[["arcview",3]],["arcorphan",3]],[[]],[[["edgeview",3]],["edgeorphan",3]],[[]],[[]],[[["faceview",3]],["faceorphan",3]],[[]],[[]],[[["arcview",3]],["ring",3]],[[]],[[["vertexview",3]],["vertexorphan",3]],[[]],[[],["meshgraph",3]],[[]],[[],["arckey",3]],[[]],[[]],[[]],[[["ring",3]],["path",3]],[[]],[[]],[[]],[[["buffererror",4]],["grapherror",4]],[[]],[[],["selector",4]],[[["usize",0]],["selector",4]],[[]],[[["vertexkey",3]],["graphkey",4]],[[["arckey",3]],["graphkey",4]],[[["edgekey",3]],["graphkey",4]],[[["facekey",3]],["graphkey",4]],[[],["result",4,[["meshgraph",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["meshgraph",3]]]],[[],["meshgraph",3]],[[["read",8]],["result",4,[["plyerror",4]]]],[[],["result",4,[["meshgraph",3]]]],[[["usize",0]],["result",4,[["meshgraph",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["path",3]],["vertexview",3]],[[["arcview",3]]],[[["arcorphan",3]]],[[["edgeview",3]]],[[["edgeorphan",3]]],[[["faceview",3]]],[[["faceorphan",3]]],[[["vertexview",3]]],[[["vertexorphan",3]]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["arcview",3]]],[[["arcorphan",3]]],[[["edgeview",3]]],[[["edgeorphan",3]]],[[["faceview",3]]],[[["faceorphan",3]]],[[["vertexview",3]]],[[["vertexorphan",3]]],[[["ring",3]],["faceview",3]],[[["ring",3]],["faceview",3]],[[["arcview",3],["",0]]],[[["arcorphan",3],["",0]]],[[["edgeview",3],["",0]]],[[["edgeorphan",3],["",0]]],[[["faceview",3],["",0]]],[[["vertexview",3],["",0]]],[[["vertexorphan",3],["",0]]],[[["arckey",3],["",0]]],[[["edgekey",3],["",0]]],[[["facekey",3],["",0]]],[[["vertexkey",3],["",0]]],[[["graphkey",4],["",0]]],[[["vertexview",3]],["iterator",8]],[[["vertexview",3]],["",26,[["clone",8],["iterator",8]]]],[[["selector",4]],["result",4,[["usize",0],["grapherror",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["faceview",3]],["iterator",8]],[[["faceview",3]],["",26,[["clone",8],["iterator",8]]]],[[["arcview",3]],["exactsizeiterator",8]],[[["faceview",3]],["iterator",8]],[[["vertexview",3]],["iterator",8]],[[["arcview",3]],["",26,[["clone",8],["exactsizeiterator",8]]]],[[["faceview",3]],["",26,[["clone",8],["iterator",8]]]],[[["vertexview",3]],["",26,[["clone",8],["iterator",8]]]],[[["arcview",3]],["exactsizeiterator",8]],[[["faceview",3]],["iterator",8]],[[["vertexview",3]],["iterator",8]],[[["arcview",3]],["",26,[["clone",8],["exactsizeiterator",8]]]],[[["faceview",3]],["",26,[["clone",8],["iterator",8]]]],[[["vertexview",3]],["",26,[["clone",8],["iterator",8]]]],[[],["arcview",3]],[[["arcview",3]],["arcview",3]],[[["edgeview",3]],["arcview",3]],[[["edgeview",3]],["arcview",3]],[[["faceview",3]],["arcview",3]],[[["ring",3]],["arcview",3]],[[["ring",3]],["iterator",8]],[[["ring",3]],["",26,[["clone",8],["iterator",8]]]],[[["arcview",3]],["option",4,[["arcview",3]]]],[[["arcview",3]],["vertexview",3]],[[["meshgraph",3]],["vec",3,[["meshgraph",3]]]],[[["arcview",3]],["edgeview",3]],[[["arcview",3]],["option",4,[["faceview",3]]]],[[["ring",3]],["option",4,[["faceview",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vertexview",3]],["iterator",8]],[[["vertexview",3]],["",26,[["clone",8],["iterator",8]]]],[[["arcview",3]],["arcview",3]],[[["arcview",3]],["arcview",3]],[[["path",3]],["path",3]],[[["vertexview",3]],["arcview",3]],[[["vertexview",3]],["",26,[["clone",8],["iterator",8]]]],[[["arcview",3]],["path",3]],[[["ring",3]],["path",3]],[[["meshgraph",3]]],[[["arcview",3]],["arcview",3]],[[["arcview",3]],["arcview",3]],[[["edgeview",3]],["edgeview",3]],[[["faceview",3]],["faceview",3]],[[["ring",3]],["ring",3]],[[["vertexview",3]],["vertexview",3]],[[["path",3]],["path",3]],[[],["ring",3]],[[["arcview",3]],["ring",3]],[[["faceview",3]],["ring",3]],[[["faceview",3]],["ring",3]],[[["ring",3]],["ring",3]],[[["vertexview",3],["vertexkey",3]],["result",4,[["path",3],["grapherror",4]]]],[[["vertexview",3],["vertexkey",3]],["result",4,[["path",3],["grapherror",4]]]],[[["arcview",3]],["vertexview",3]],[[["ring",3]],["iterator",8]],[[["ring",3]],["",26,[["clone",8],["iterator",8]]]],[[["arcview",3]],["bool",0]],[[["edgeview",3]],["bool",0]],[[["path",3]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["path",3]],["bool",0]],[[["",0]]],[[["arcview",3]]],[[["arcorphan",3]]],[[["edgeview",3]]],[[["edgeorphan",3]]],[[["faceview",3]]],[[["faceorphan",3]]],[[["vertexview",3]]],[[["vertexorphan",3]]],[[["selector",4]],["result",4,[["grapherror",4]]]],[[["faceview",3],["into",8,[["selector",4,[["facekey",3]]]]]],["result",4,[["faceview",3],["grapherror",4]]]],[[],["result",4,[["vertexposition",6],["grapherror",4]]]],[[["arcview",3]],["vertexposition",6]],[[["edgeview",3]],["vertexposition",6]],[[["arckey",3],["arckey",3]],["bool",0]],[[["edgekey",3],["edgekey",3]],["bool",0]],[[["facekey",3],["facekey",3]],["bool",0]],[[["vertexkey",3],["vertexkey",3]],["bool",0]],[[["grapherror",4],["grapherror",4]],["bool",0]],[[["selector",4,[["partialeq",8]]],["selector",4]],["bool",0]],[[["graphkey",4],["graphkey",4]],["bool",0]],[[],["meshgraph",3]],[[["arcview",3]],["arcview",3]],[[["vertexview",3]],["result",4,[["vector",6,[["vertexposition",6]]],["grapherror",4]]]],[[["arcview",3]],["result",4,[["vector",6,[["vertexposition",6]]],["grapherror",4]]]],[[],["result",4,[["vector",6,[["vertexposition",6]]],["grapherror",4]]]],[[["arcview",3]],["vector",6,[["vertexposition",6]]]],[[["faceview",3]],["result",4,[["vector",6,[["vertexposition",6]]],["grapherror",4]]]],[[["vertexview",3]],["result",4,[["vector",6,[["vertexposition",6]]],["grapherror",4]]]],[[["arcview",3]],["arcview",3]],[[["path",3]],["path",3]],[[["vertexview",3]],["arcview",3]],[[["vertexview",3]],["",26,[["clone",8],["iterator",8]]]],[[["arcview",3]],["path",3]],[[["ring",3]],["path",3]],[[["meshgraph",3]],["result",4,[["path",3,[["meshgraph",3]]],["grapherror",4]]]],[[["meshgraph",3]],["result",4,[["path",3,[["meshgraph",3]]],["grapherror",4]]]],[[],["result",4,[["plane",3,[["vertexposition",6]]],["grapherror",4]]]],[[["faceview",3]],["result",4,[["plane",3,[["vertexposition",6]]],["grapherror",4]]]],[[["faceview",3]],["vertexview",3]],[[["faceview",3]],["vertexview",3]],[[["faceview",3]],["result",4,[["vertexview",3],["grapherror",4]]]],[[["path",3]],["option",4,[["arckey",3]]]],[[["path",3]],["option",4,[["arckey",3]]]],[[["vertexview",3]],["vertexposition",6]],[[["vertexorphan",3]],["vertexposition",6]],[[["arcview",3]],["arcview",3]],[[["path",3],["into",8,[["selector",4,[["vertexkey",3]]]]]],["result",4,[["arckey",3],["grapherror",4]]]],[[["path",3],["into",8,[["selector",4,[["vertexkey",3]]]]]],["result",4,[["arckey",3],["grapherror",4]]]],[[["path",3]],["result",4,[["arckey",3],["grapherror",4]]]],[[["path",3]],["result",4,[["arckey",3],["grapherror",4]]]],[[],["option",4]],[[["arcview",3]],["option",4,[["vertexview",3]]]],[[["faceview",3]],["option",4,[["ring",3]]]],[[["vertexview",3]]],[[["",0]],["ring",3]],[[["arcview",3]],["ring",3]],[[["faceview",3]],["ring",3]],[[["faceview",3]],["ring",3]],[[["ring",3]],["ring",3]],[[["ring",3],["into",8,[["selector",4,[["vertexkey",3]]]]],["into",8,[["selector",4,[["vertexkey",3]]]]]],["result",4,[["usize",0],["grapherror",4]]]],[[["path",3],["into",8,[["selector",4,[["vertexkey",3]]]]],["into",8,[["selector",4,[["vertexkey",3]]]]]],["result",4,[["grapherror",4]]]],[[["vertexview",3],["vertexkey",3]],["result",4,[["path",3],["grapherror",4]]]],[[["vertexview",3],["vertexkey",3]],["result",4,[["path",3],["grapherror",4]]]],[[["meshgraph",3]]],[[["meshgraph",3]]],[[["arcview",3]],["vertexview",3]],[[["faceview",3],["into",8,[["selector",4,[["vertexkey",3]]]]],["into",8,[["selector",4,[["vertexkey",3]]]]]],["result",4,[["arcview",3],["grapherror",4]]]],[[["path",3],["into",8,[["selector",4,[["vertexkey",3]]]]]],["result",4,[["grapherror",4]]]],[[["arcview",3]],["vertexview",3]],[[["path",3,[["meshgraph",3]]]],["result",4,[["grapherror",4]]]],[[["arcview",3]],["vertexview",3]],[[["meshgraph",3]],["result",4]],[[["meshgraph",3]],["result",4]],[[["meshgraph",3]],["result",4]],[[["meshgraph",3]],["result",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["arcview",3]],["arcview",3]],[[["edgeview",3]],["edgeview",3]],[[["faceview",3]],["faceview",3]],[[["ring",3]],["ring",3]],[[["vertexview",3]],["vertexview",3]],[[["path",3]],["path",3]],[[["",0]],["string",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["faceview",3]],["",26,[["clone",8],["iterator",8]]]],[[["vertexview",3]],["",26,[["clone",8],["iterator",8]]]],[[["faceview",3]],["",26,[["clone",8],["iterator",8]]]],[[["vertexview",3]],["",26,[["clone",8],["iterator",8]]]],[[["faceview",3]],["faceview",3]],[[["meshgraph",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["meshbuffer",3]],["result",4,[["meshgraph",3]]]],[[["meshbuffer",3,[["flat",3]]]],["result",4,[["meshgraph",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["vertexview",3]],["usize",0]],[[["meshgraph",3],["vertexkey",3]],["option",4,[["vertexview",3,[["meshgraph",3]]]]]],[[["meshgraph",3]],["usize",0]],[[["meshgraph",3],["vertexkey",3]],["option",4,[["vertexview",3,[["meshgraph",3]]]]]],[[["ring",3]],["iterator",8]],[[["meshgraph",3]],["iterator",8]],[[["ring",3]],["",26,[["clone",8],["iterator",8]]]],[[["meshgraph",3]],["iterator",8]],[[["path",3]],["",26,[["clone",8],["iterator",8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",4]],[[],["hashindexer",3]],[[],["lruindexer",3]],[[["flat",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["hashindexer",3]]],[[["lruindexer",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["hashindexer",3]],[[],["lruindexer",3]],[[["",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[["usize",0]],["lruindexer",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["ngon",3]]],[[["boundedpolygon",4]]],[[["unboundedpolygon",3]]],[[["ngon",3]]],[[["boundedpolygon",4]]],[[["unboundedpolygon",3]]],[[["ngon",3]]],[[["boundedpolygon",4]]],[[["unboundedpolygon",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["ngon",3,[["clone",8]]]],["ngon",3,[["clone",8]]]],[[["edgeedge",4,[["clone",8]]]],["edgeedge",4,[["clone",8]]]],[[["boundedpolygon",4,[["clone",8]]]],["boundedpolygon",4,[["clone",8]]]],[[["unboundedpolygon",3,[["clone",8]]]],["unboundedpolygon",3,[["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["ngon",3]],["ngon",3]],[[["unboundedpolygon",3]],["unboundedpolygon",3]],[[],["result",4]],[[],["ngon",3]],null,null,[[["",0]],["vec",3,[["edge",6]]]],[[["plane",3]]],[[["plane",3,[["position",6]]]]],[[["scalar",6]]],[[["scalar",6,[["position",6]]]]],[[["ngon",3,[["partialeq",8]]],["ngon",3]],["bool",0]],[[["edgeedge",4,[["partialeq",8]]],["edgeedge",4]],["bool",0]],[[["boundedpolygon",4,[["partialeq",8]]],["boundedpolygon",4]],["bool",0]],[[["unboundedpolygon",3,[["partialeq",8]]],["unboundedpolygon",3]],["bool",0]],[[["ngon",3,[["debug",8]]],["formatter",3]],["result",6]],[[["edgeedge",4],["formatter",3]],["result",4,[["error",3]]]],[[["boundedpolygon",4,[["debug",8]]],["formatter",3]],["result",6]],[[["unboundedpolygon",3,[["debug",8]]],["formatter",3]],["result",6]],[[["ngon",3]]],[[["boundedpolygon",4]]],[[]],[[],["ngon",3]],[[]],[[]],[[],["boundedpolygon",4]],[[["trigon",6]],["boundedpolygon",4]],[[["tetragon",6]],["boundedpolygon",4]],[[]],[[],["boundedpolygon",4]],[[["boundedpolygon",4]],["unboundedpolygon",3]],[[["ngon",3]],["unboundedpolygon",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["ngon",3]]]],[[],["option",4,[["unboundedpolygon",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],null,[[["ngon",3],["usize",0]]],[[["boundedpolygon",4],["usize",0]]],[[["unboundedpolygon",3],["usize",0]]],[[["ngon",3],["usize",0]]],[[["boundedpolygon",4],["usize",0]]],[[["unboundedpolygon",3],["usize",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["edge",6],["edge",6]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[["ngon",3]]],[[["edgeedge",4]],["option",4,[["edge",6]]]],[[["ngon",3]]],[[["boundedpolygon",4]]],[[["unboundedpolygon",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ngon",3]]],[[["boundedpolygon",4]]],[[["unboundedpolygon",3]]],[[]],[[["ngon",3]]],[[["boundedpolygon",4]]],[[["unboundedpolygon",3]]],[[["edgeedge",4]],["option",4]],[[]],[[["trigon",6]]],[[["tetragon",6]]],[[["boundedpolygon",4]]],[[["tetragon",6]],["arrayvec",3,[["trigon",6]]]],[[["trigon",6]]],[[["tetragon",6]]],[[["boundedpolygon",4]]],[[]],[[]],[[]],[[["edge",6],["edge",6]],["bool",0]],[[["ngon",3],["ngon",3]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["edge",6]],["option",4,[["line",3,[["position",6]]]]]],[[["ngon",3]],["option",4,[["line",3,[["position",6]]]]]],[[["ngon",3]]],[[["boundedpolygon",4]]],[[["unboundedpolygon",3]]],[[],["interiormap",3]],[[["ngon",3,[["partialeq",8]]],["ngon",3]],["bool",0]],[[["edgeedge",4,[["partialeq",8]]],["edgeedge",4]],["bool",0]],[[["boundedpolygon",4,[["partialeq",8]]],["boundedpolygon",4]],["bool",0]],[[["unboundedpolygon",3,[["partialeq",8]]],["unboundedpolygon",3]],["bool",0]],[[],["edge",6]],[[],["trigon",6]],[[],["tetragon",6]],[[],["ngon",3]],[[],["ngon",3]],[[],["ngon",3]],[[["interiormap",3]],["option",4]],[[["trigon",6]],["option",4,[["plane",3,[["position",6]]]]]],[[["ngon",3]],["option",4,[["plane",3,[["position",6]]]]]],[[["ngon",3]],["ngon",3,[["position",6]]]],[[["unboundedpolygon",3]],["unboundedpolygon",3,[["position",6]]]],[[["plane",3,[["position",6]]]]],[[["isize",0]]],[[["edge",6],["isize",0]],["edge",6]],[[["trigon",6],["isize",0]],["trigon",6]],[[["tetragon",6],["isize",0]],["tetragon",6]],[[["boundedpolygon",4],["isize",0]],["boundedpolygon",4]],[[["interiormap",3]]],null,[[],["decompose",3]],[[],["unboundedpolygon",3]],[[],["decompose",3,[["ngon",3],["ngon",3],["arrayvec",3,[["ngon",3]]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["decompose",3,[["ngon",3]]]],[[],["unboundedpolygon",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["ngon",3]]]],[[],["result",4,[["unboundedpolygon",3]]]],[[],["option",4]],[[],["option",4,[["ngon",3]]]],[[],["option",4,[["boundedpolygon",4]]]],[[],["option",4,[["unboundedpolygon",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["decompose",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ngon",3],["ngon",3]]],[[],["iterator",8]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["plane",4]],["plane",4]],[[["bounds",3,[["clone",8]]]],["bounds",3,[["clone",8]]]],[[["cube",3]],["cube",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["bounds",3]],[[],["cube",3]],[[["plane",4],["plane",4]],["bool",0]],[[["plane",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["u64",0]],[[["plane",4],["",0]]],[[["cube",3],["usize",0]]],[[["cube",3],["usize",0]]],[[["cube",3],["usize",0]]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["cube",3]],[[["plane",4]],["unit",3]],[[["cube",3]],["usize",0]],[[["cube",3],["usize",0]]],[[["cube",3],["usize",0]]],[[["cube",3],["usize",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["bounds",3]],[[],["bounds",3]],[[["cube",3]],["usize",0]],[[["cube",3]],["usize",0]],[[["cube",3]],["usize",0]],[[["cube",3],["usize",0]]],[[["cube",3],["usize",0]]],[[["cube",3],["usize",0]]],[[]],[[]],[[]],[[["scalar",6]],["bounds",3]],[[["scalar",6]],["bounds",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",4]],[[],["decompose",3,[["edge",6]]]],[[]],[[]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[],["arrayvec",3,[["trigon",6]]]],[[]],[[]],[[["",0]],["bool",0]],[[["decompose",3]],["option",4]],[[["decompose",3],["usize",0]],["decompose",3,[["iterator",8]]]],[[["decompose",3]]],[[],["decompose",3]],[[],["decompose",3]],[[],["decompose",3,[["tetragon",6],["trigon",6],["arrayvec",3,[["trigon",6]]]]]],[[],["decompose",3,[["ngon",3],["ngon",3],["arrayvec",3,[["ngon",3]]]]]],[[["",0]],["option",4]],[[["",0]]],[[],["decompose",3,[["trigon",6]]]],[[],["decompose",3,[["ngon",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["decompose",3]],[[],["decompose",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["usize",0]]],[[["",0]],["generate",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["generate",3]],["option",4]],[[["",0]],["usize",0]],[[["",0],["usize",0]]],[[["",0]],["generate",3]],[[["",0]],["generate",3]],[[["generate",3]]],[[],["decompose",3]],[[],["decompose",3,[["ngon",3],["ngon",3],["arrayvec",3,[["ngon",3]]]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["decompose",3,[["ngon",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["usize",0]],[[["",0],["usize",0]]],[[],["decompose",3]],[[["",0]],["generate",3]],[[["",0]],["generate",3]],[[]],[[]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["bounds",3,[["clone",8]]]],["bounds",3,[["clone",8]]]],[[["uvsphere",3]],["uvsphere",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["bounds",3]],[[],["uvsphere",3]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["uvsphere",3],["usize",0]]],[[["uvsphere",3],["usize",0]]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["usize",0],["usize",0]],["uvsphere",3]],[[["uvsphere",3]],["usize",0]],[[["uvsphere",3],["usize",0]]],[[["uvsphere",3],["usize",0]]],[[["",0]]],[[["",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["bounds",3]],[[],["bounds",3]],[[["uvsphere",3]],["usize",0]],[[["uvsphere",3]],["usize",0]],[[["uvsphere",3],["usize",0]]],[[["uvsphere",3],["usize",0]]],[[]],[[]],[[["scalar",6]],["bounds",3]],[[["scalar",6]],["bounds",3]]],"p":[[8,"StaticArity"],[8,"DynamicArity"],[8,"TryFromIterator"],[4,"MeshArity"],[3,"Perimeter"],[3,"Keys"],[8,"IteratorExt"],[8,"Arity"],[13,"Uniform"],[13,"NonUniform"],[4,"BufferError"],[8,"FromRawBuffers"],[8,"FromRawBuffersWithArity"],[8,"IntoFlatIndex"],[8,"IntoStructuredIndex"],[3,"MeshBuffer"],[13,"ArityConflict"],[8,"Buildable"],[8,"MeshBuilder"],[8,"SurfaceBuilder"],[8,"FacetBuilder"],[8,"ToConstant"],[8,"ToType"],[3,"Constant"],[8,"FromEncoding"],[8,"FaceDecoder"],[8,"VertexDecoder"],[4,"Property"],[4,"PlyError"],[4,"PropertyType"],[3,"Ply"],[3,"ElementDefinition"],[3,"PropertyDefinition"],[3,"PositionEncoding"],[8,"FaceElementDecoder"],[8,"FacePropertyDecoder"],[8,"DecodePosition"],[8,"VertexElementDecoder"],[8,"VertexPropertyDecoder"],[8,"FromPly"],[8,"PropertyExt"],[8,"ElementExt"],[6,"Element"],[8,"ToPly"],[13,"Io"],[13,"Char"],[13,"UChar"],[13,"Short"],[13,"UShort"],[13,"Int"],[13,"UInt"],[13,"Float"],[13,"Double"],[13,"ListChar"],[13,"ListUChar"],[13,"ListShort"],[13,"ListUShort"],[13,"ListInt"],[13,"ListUInt"],[13,"ListFloat"],[13,"ListDouble"],[13,"Scalar"],[13,"List"],[4,"LineLine"],[4,"LinePlane"],[8,"Intersection"],[8,"AsPosition"],[4,"PlaneRay"],[8,"AsPositionMut"],[3,"Unit"],[3,"Line"],[3,"Ray"],[3,"Aabb"],[3,"Plane"],[8,"FromGeometry"],[8,"IntoGeometry"],[13,"Point"],[13,"Line"],[13,"TimeOfImpact"],[13,"Line"],[13,"TimeOfImpact"],[13,"Ray"],[4,"BinaryPartition"],[8,"PointPartition"],[4,"GraphKey"],[8,"GraphData"],[4,"GraphError"],[4,"Selector"],[8,"ClosedView"],[3,"MeshGraph"],[3,"FaceView"],[3,"ArcView"],[3,"VertexView"],[8,"ToArc"],[3,"EdgeView"],[3,"Ring"],[3,"Path"],[3,"ArcOrphan"],[3,"EdgeOrphan"],[3,"FaceOrphan"],[3,"VertexOrphan"],[3,"ArcKey"],[3,"EdgeKey"],[3,"FaceKey"],[3,"VertexKey"],[8,"VertexCentroid"],[8,"FaceCentroid"],[8,"ToRing"],[8,"EdgeMidpoint"],[8,"VertexNormal"],[8,"ArcNormal"],[8,"FaceNormal"],[8,"FacePlane"],[8,"Rebind"],[13,"ArityConflict"],[13,"Vertex"],[13,"Arc"],[13,"Edge"],[13,"Face"],[13,"ByKey"],[13,"ByIndex"],[8,"FromIndexer"],[8,"Grouping"],[8,"IndexBuffer"],[3,"HashIndexer"],[3,"LruIndexer"],[3,"Flat"],[8,"CollectWithIndexer"],[8,"Indexer"],[8,"GroupedIndexVertices"],[8,"IndexVertices"],[8,"Push"],[3,"NGon"],[4,"EdgeEdge"],[8,"IntoIndexed"],[4,"BoundedPolygon"],[8,"IntoPolygons"],[8,"Zip"],[8,"Topological"],[3,"UnboundedPolygon"],[3,"InteriorMap"],[6,"Edge"],[6,"Trigon"],[6,"Tetragon"],[8,"Polygonal"],[8,"MapVertices"],[8,"Rotate"],[13,"N3"],[13,"N4"],[13,"Point"],[13,"Edge"],[4,"Plane"],[3,"Bounds"],[3,"Cube"],[8,"IntoVertices"],[8,"IntoEdges"],[8,"IntoTrigons"],[8,"IntoSubdivisions"],[3,"Decompose"],[8,"Edges"],[8,"IntoTetrahedrons"],[8,"Subdivide"],[8,"Tetrahedrons"],[8,"Triangulate"],[8,"Vertices"],[8,"AttributePolygonGenerator"],[8,"AttributeVertexGenerator"],[8,"IndexingPolygonGenerator"],[8,"AttributeGenerator"],[3,"Normal"],[3,"Position"],[3,"Generate"],[8,"Generator"],[8,"PolygonGenerator"],[3,"Bounds"],[3,"UvSphere"]]},\
"theon":{"doc":"<strong>Theon</strong> abstracts Euclidean spaces and geometric queries …","t":[8,8,6,16,0,10,10,0,5,11,0,0,0,0,11,8,8,8,8,8,8,16,8,16,16,16,8,8,11,11,10,10,10,10,10,10,11,11,11,11,11,11,11,11,10,10,0,0,0,0,0,0,8,8,8,8,16,16,16,16,16,8,10,10,10,11,11,10,2,3,8,3,13,13,4,4,16,3,4,13,3,13,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,8,16,8,16,16,16,8,8,8,8,8,8,16,6,16,16,6,16,8,16,16,6,8,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,10,11,10,11,11,11,10,10,11,11,11,11],"n":["AsPosition","AsPositionMut","Position","Position","adjunct","as_position","as_position_mut","integration","lerp","map_position","ops","prelude","query","space","transform","Adjunct","Converged","Extend","Fold","FromItems","IntoItems","Item","Map","Output","Output","Output","Truncate","ZipMap","all","any","converged","extend","fold","from_items","into_items","map","max_or_undefined","min_or_undefined","per_item_max_or_undefined","per_item_min_or_undefined","per_item_product","per_item_sum","product","sum","truncate","zip_map","cgmath","decorum","glam","mint","nalgebra","ultraviolet","Cross","Dot","Interpolate","MulMN","Output","Output","Output","Output","Output","Project","cross","dot","lerp","midpoint","mul_mn","project","_","Aabb","Intersection","Line","Line","Line","LineLine","LinePlane","Output","Plane","PlaneRay","Point","Ray","Ray","TimeOfImpact","TimeOfImpact","Unit","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","direction","direction","endpoint","eq","eq","eq","eq","eq","eq","eq","extent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_points","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","get","inlined_clone","inlined_clone","inlined_clone","inlined_clone","inlined_clone","inlined_clone","inlined_clone","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","into","into","into","into","into","into","into","into","into_inner","into_line","into_line","into_line","into_point","into_ray","into_ray","into_time_of_impact","into_time_of_impact","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","lower_bound","ne","ne","ne","ne","ne","ne","ne","neg","neg","normal","origin","origin","origin","origin","reverse","reverse","slope","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_inner","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_set","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","upper_bound","volume","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","x","x","x_intercept","y","y","y_intercept","z","z","0","0","0","0","0","0","AffineSpace","Bases","Basis","Column","CoordinateSpace","Dual","DualSpace","EuclideanSpace","FiniteDimensional","Homogeneous","InnerSpace","Matrix","N","Projective","ProjectiveSpace","Row","Scalar","Scalar","SquareMatrix","Translation","Transpose","Vector","VectorSpace","canonical_basis","canonical_basis_component","centroid","column_component","column_count","difference","dimensions","from_coordinates","from_homogeneous","from_homogeneous","from_x","from_x","from_xy","from_xy","from_xyz","from_xyz","i","into_coordinates","into_homogeneous","into_homogeneous","into_x","into_x","into_xy","into_xy","into_xyz","into_xyz","is_zero","j","k","magnitude","mean","multiplicative_identity","normalize","origin","row_component","row_count","scalar_component","scalar_component","square_magnitude","translate","transpose","transpose","x","y","z","zero"],"q":["theon","","","","","","","","","","","","","","","theon::adjunct","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","theon::integration","","","","","","theon::ops","","","","","","","","","","","","","","","","theon::prelude","theon::querytheon::query::LineLine","","theon::query::LinePlane","","theon::query::PlaneRay","","theon::space","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Immutable positional data.","Mutable positional data.","","","Static groups of homogeneous data.","","","Integration of external crates and foreign types.","Linearly interpolates between two values.","","","Re-exports commonly used types and traits.","Spatial queries.","Vector and affine spaces.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Axis-aligned bounding box.","Intersection of geometric objects.","Line.","","","Intersection of lines.","Intersection of a line and a plane.","","","Intersection of a plane and a ray.","","Ray or half-line.","","","","Unit vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The unit direction(s) in which the line extends from its …","The unit direction in which the ray extends from its …","","","","","","","","","The <em>extent</em> of the bounding box.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an <code>Aabb</code> from a set of points.","","","","","","","","","","","","","","","","","","Determines if a line intersects a plane at a point or lies …","","","","","Determines the minimum and maximum <em>times of impact</em> of a <code>Ray</code>","","","Determines if a ray intersects a plane at a point or lies …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The origin or contained point of the line.","The origin or initial point of the ray.","The <em>origin</em> of the bounding box.","","","Reverses the direction of the ray.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Unit</code> from a non-zero magnitude vector.","","","","","","","","","","","","","","","","","","","","Gets the Lebesgue measure ($n$-dimensional volume) of the …","","","","","","","","","","","","","","","","","","","","","","","","","Describes the basis of a vector space.","","","","","","","","","","","The projective space of a <code>EuclideanSpace</code>.","","","The scalar of a <code>EuclideanSpace</code>.","","","","","The vector (translation, coordinate space, etc.) of a …","","Gets a type that can be converted into an iterator over …","","","","","","","","","","","","","","","","Gets the canonical basis vector $\\\\hat{i}$ that describes …","","","","","","","","","","","Gets the canonical basis vector $\\\\hat{j}$ that describes …","Gets the canonical basis vector $\\\\hat{k}$ that describes …","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,0,1,2,0,0,2,0,0,0,0,2,0,0,0,0,0,0,3,0,4,5,6,0,0,7,7,8,9,7,10,4,5,7,7,6,6,6,6,7,7,11,6,0,0,0,0,0,0,0,0,0,0,12,13,14,15,16,0,15,14,13,13,16,12,0,0,0,0,17,18,0,0,19,0,0,17,0,20,18,20,0,21,21,22,17,18,23,24,25,20,21,22,17,18,23,24,25,20,21,22,17,18,23,24,25,20,21,22,17,18,23,24,25,20,21,22,23,24,22,23,24,21,22,17,18,23,24,20,24,21,22,17,18,23,24,25,20,21,22,17,18,23,24,25,20,24,21,22,17,18,23,24,25,20,21,21,22,17,18,23,24,20,19,22,22,23,23,24,24,24,25,25,21,22,17,18,23,24,25,20,21,17,18,23,17,22,20,18,20,21,22,17,18,23,24,25,20,24,21,22,17,18,23,24,20,21,23,25,22,23,24,25,21,23,22,21,22,17,18,23,24,25,20,21,22,17,18,23,24,25,20,21,22,17,18,23,24,25,20,21,22,17,18,23,24,25,20,21,21,22,17,18,23,24,25,20,21,21,22,17,18,23,24,25,20,24,24,24,21,22,17,18,23,24,25,20,21,22,22,21,22,22,21,22,26,27,28,29,30,31,0,32,0,33,34,35,0,0,0,0,0,0,36,0,37,33,0,38,0,39,33,0,0,32,32,34,33,33,39,36,34,38,34,38,34,38,34,38,34,32,34,38,34,38,34,38,34,38,34,38,32,32,40,38,41,40,34,33,33,38,33,40,39,35,33,38,38,38,38],"f":[null,null,null,null,null,[[["",0]]],[[["",0]]],null,[[["r64",6]]],[[]],null,null,null,null,[[["",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",0]],[[],["bool",0]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["r64",6]]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["unit",3]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["unit",3,[["clone",8]]]],["unit",3,[["clone",8]]]],[[["line",3,[["clone",8]]]],["line",3,[["clone",8]]]],[[["lineline",4,[["clone",8]]]],["lineline",4,[["clone",8]]]],[[["lineplane",4,[["clone",8]]]],["lineplane",4,[["clone",8]]]],[[["ray",3,[["clone",8]]]],["ray",3,[["clone",8]]]],[[["aabb",3,[["clone",8]]]],["aabb",3,[["clone",8]]]],[[["plane",3,[["clone",8]]]],["plane",3,[["clone",8]]]],[[["planeray",4,[["clone",8]]]],["planeray",4,[["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["unit",3]],[[],["line",3]],[[],["ray",3]],[[],["aabb",3]],null,null,[[["aabb",3]]],[[["unit",3,[["partialeq",8]]],["unit",3]],["bool",0]],[[["line",3,[["partialeq",8]]],["line",3]],["bool",0]],[[["lineline",4,[["partialeq",8]]],["lineline",4]],["bool",0]],[[["lineplane",4,[["partialeq",8]]],["lineplane",4]],["bool",0]],[[["ray",3,[["partialeq",8]]],["ray",3]],["bool",0]],[[["aabb",3,[["partialeq",8]]],["aabb",3]],["bool",0]],[[["planeray",4,[["partialeq",8]]],["planeray",4]],["bool",0]],null,[[["unit",3,[["debug",8]]],["formatter",3]],["result",6]],[[["line",3],["formatter",3]],["result",4,[["error",3]]]],[[["lineline",4],["formatter",3]],["result",4,[["error",3]]]],[[["lineplane",4],["formatter",3]],["result",4,[["error",3]]]],[[["ray",3],["formatter",3]],["result",4,[["error",3]]]],[[["aabb",3],["formatter",3]],["result",4,[["error",3]]]],[[["plane",3],["formatter",3]],["result",4,[["error",3]]]],[[["planeray",4],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["aabb",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["unit",3]],["",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["",0]],["option",4]],[[["line",3],["plane",3]],["option",4]],[[["line",3],["line",3]],["option",4]],[[["ray",3],["plane",3]],["option",4]],[[["ray",3],["aabb",3]],["option",4]],[[["aabb",3],["aabb",3]],["option",4]],[[["aabb",3],["ray",3]],["option",4]],[[["aabb",3],["",0]],["option",4]],[[["plane",3],["line",3]],["option",4]],[[["plane",3],["ray",3]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unit",3]]],[[["lineline",4]],["option",4,[["line",3]]]],[[["lineplane",4]],["option",4,[["line",3]]]],[[["ray",3]],["line",3]],[[["lineline",4]],["option",4]],[[["line",3]],["ray",3]],[[["planeray",4]],["option",4,[["ray",3]]]],[[["lineplane",4]],["option",4,[["scalar",6]]]],[[["planeray",4]],["option",4,[["scalar",6]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["aabb",3]]],[[["unit",3,[["partialeq",8]]],["unit",3]],["bool",0]],[[["line",3,[["partialeq",8]]],["line",3]],["bool",0]],[[["lineline",4,[["partialeq",8]]],["lineline",4]],["bool",0]],[[["lineplane",4,[["partialeq",8]]],["lineplane",4]],["bool",0]],[[["ray",3,[["partialeq",8]]],["ray",3]],["bool",0]],[[["aabb",3,[["partialeq",8]]],["aabb",3]],["bool",0]],[[["planeray",4,[["partialeq",8]]],["planeray",4]],["bool",0]],[[["unit",3]]],[[["ray",3]]],null,null,null,null,null,[[["unit",3]],["unit",3]],[[["ray",3]],["ray",3]],[[["line",3]],["option",4,[["scalar",6]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4,[["unit",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["unit",3]],["option",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["aabb",3],["aabb",3]],["aabb",3]],[[["aabb",3]]],[[["aabb",3]],["scalar",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["unit",3]],[[],["line",3]],[[["line",3]],["option",4,[["scalar",6]]]],[[],["unit",3]],[[],["line",3]],[[["line",3]],["option",4,[["scalar",6]]]],[[],["unit",3]],[[],["line",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["usize",0]],["option",4]],[[],["option",4]],[[["",0],["usize",0]],["option",4]],[[],["usize",0]],[[]],[[],["usize",0]],[[]],[[],["option",4]],[[["projective",6]],["option",4]],[[]],[[["scalar",6]]],[[]],[[["scalar",6],["scalar",6]]],[[]],[[["scalar",6],["scalar",6],["scalar",6]]],[[]],[[]],[[]],[[],["projective",6]],[[]],[[],["scalar",6]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[["",0],["usize",0]],["option",4]],[[],["usize",0]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0],["usize",0]],["option",4]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[]]],"p":[[8,"AsPosition"],[8,"AsPositionMut"],[8,"Adjunct"],[8,"IntoItems"],[8,"Map"],[8,"ZipMap"],[8,"Fold"],[8,"Converged"],[8,"Extend"],[8,"FromItems"],[8,"Truncate"],[8,"Project"],[8,"Interpolate"],[8,"Dot"],[8,"Cross"],[8,"MulMN"],[4,"LineLine"],[4,"LinePlane"],[8,"Intersection"],[4,"PlaneRay"],[3,"Unit"],[3,"Line"],[3,"Ray"],[3,"Aabb"],[3,"Plane"],[13,"Point"],[13,"Line"],[13,"TimeOfImpact"],[13,"Line"],[13,"TimeOfImpact"],[13,"Ray"],[8,"Basis"],[8,"Matrix"],[8,"EuclideanSpace"],[8,"DualSpace"],[8,"FiniteDimensional"],[8,"Homogeneous"],[8,"VectorSpace"],[8,"AffineSpace"],[8,"InnerSpace"],[8,"SquareMatrix"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
